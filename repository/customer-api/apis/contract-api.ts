/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service
 * API for Customer Service
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ContractContractCollectionContractReadByTokenDocumentation } from '../models';
// @ts-ignore
import { ContractContractCollectionJsonldContractReadByTokenDocumentation } from '../models';
// @ts-ignore
import { ContractContractReadDocumentation } from '../models';
// @ts-ignore
import { ContractInfosContractContractInfosReadDocumentation } from '../models';
// @ts-ignore
import { ContractInfosContractJsonldContractInfosReadDocumentation } from '../models';
// @ts-ignore
import { ContractJsonldContractReadDocumentation } from '../models';
// @ts-ignore
import { ContractJsonldDocumentation } from '../models';
// @ts-ignore
import { ContractJsonldDownloadPdfDocumentation } from '../models';
// @ts-ignore
import { GetContractCollection200Response } from '../models';
/**
 * ContractApi - axios parameter creator
 * @export
 */
export const ContractApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Contract resource.
         * @summary Retrieves a Contract resource.
         * @param {string} typeContract Type of contract
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} typeDocument Type of document to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractDownloadContractItem: async (typeContract: string, brand: string, contractNumber: string, typeDocument: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('contractDownloadContractItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('contractDownloadContractItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('contractDownloadContractItem', 'contractNumber', contractNumber)
            // verify required parameter 'typeDocument' is not null or undefined
            assertParamExists('contractDownloadContractItem', 'typeDocument', typeDocument)
            const localVarPath = `/api/contract/{typeContract}/{brand}/{contractNumber}/{typeDocument}/download`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)))
                .replace(`{${"typeDocument"}}`, encodeURIComponent(String(typeDocument)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Contract resource.
         * @summary Delete contract
         * @param {string} id id contract
         * @param {string} contractNumber contractNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContractContractItem: async (id: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteContractContractItem', 'id', id)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('deleteContractContractItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/contract/{id}/{contractNumber}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Contract resource.
         * @summary get contracts by token
         * @param {string} confirmationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionContractsByTokenActivationContractItem: async (confirmationToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'confirmationToken' is not null or undefined
            assertParamExists('getCollectionContractsByTokenActivationContractItem', 'confirmationToken', confirmationToken)
            const localVarPath = `/api/contract/attached/{confirmationToken}`
                .replace(`{${"confirmationToken"}}`, encodeURIComponent(String(confirmationToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Contract resources.
         * @summary Retrieves the collection of Contract resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [user] 
         * @param {Array<string>} [user2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractCollection: async (page?: number, itemsPerPage?: number, user?: string, user2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (user2) {
                localVarQueryParameter['user[]'] = user2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Contract resource.
         * @summary Retrieves a Contract resource.
         * @param {string} contractNumber Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractItem: async (contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getContractItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/contract/{contractNumber}`
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Contract resource.
         * @summary get infos contract from mulsoft
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosContractContractItem: async (typeContract: string, brand: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getInfosContractContractItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getInfosContractContractItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getInfosContractContractItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/contract/{typeContract}/{brand}/{contractNumber}/infos`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Contract resource.
         * @summary Creates a Contract resource.
         * @param {string} [contractNumber] 
         * @param {string} [type] 
         * @param {boolean} [enabled] 
         * @param {boolean} [locked] 
         * @param {string} [externalId] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string | null} [user] 
         * @param {number} [id] 
         * @param {string | null} [creationDateAt] 
         * @param {string | null} [updateDateAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContractCollection: async (contractNumber?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, user?: string | null, id?: number, creationDateAt?: string | null, updateDateAt?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (enabled !== undefined) { 
                localVarFormParams.append('enabled', enabled as any);
            }
    
            if (locked !== undefined) { 
                localVarFormParams.append('locked', locked as any);
            }
    
            if (externalId !== undefined) { 
                localVarFormParams.append('externalId', externalId as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('firstName', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('lastName', lastName as any);
            }
    
            if (user !== undefined) { 
                localVarFormParams.append('user', user as any);
            }
    
            if (id !== undefined) { 
                localVarFormParams.append('id', id as any);
            }
    
            if (creationDateAt !== undefined) { 
                localVarFormParams.append('creationDateAt', creationDateAt as any);
            }
    
            if (updateDateAt !== undefined) { 
                localVarFormParams.append('updateDateAt', updateDateAt as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Contract resource.
         * @summary Replaces the Contract resource.
         * @param {string} contractNumber Resource identifier
         * @param {string} [contractNumber2] 
         * @param {string} [type] 
         * @param {boolean} [enabled] 
         * @param {boolean} [locked] 
         * @param {string} [externalId] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string | null} [updateDateAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContractItem: async (contractNumber: string, contractNumber2?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, updateDateAt?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('putContractItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/contract/{contractNumber}`
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (contractNumber2 !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber2 as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (enabled !== undefined) { 
                localVarFormParams.append('enabled', enabled as any);
            }
    
            if (locked !== undefined) { 
                localVarFormParams.append('locked', locked as any);
            }
    
            if (externalId !== undefined) { 
                localVarFormParams.append('externalId', externalId as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('firstName', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('lastName', lastName as any);
            }
    
            if (updateDateAt !== undefined) { 
                localVarFormParams.append('updateDateAt', updateDateAt as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractApi - functional programming interface
 * @export
 */
export const ContractApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContractApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Contract resource.
         * @summary Retrieves a Contract resource.
         * @param {string} typeContract Type of contract
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} typeDocument Type of document to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractDownloadContractItem(typeContract: string, brand: string, contractNumber: string, typeDocument: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractDownloadContractItem(typeContract, brand, contractNumber, typeDocument, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Contract resource.
         * @summary Delete contract
         * @param {string} id id contract
         * @param {string} contractNumber contractNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContractContractItem(id: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContractContractItem(id, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Contract resource.
         * @summary get contracts by token
         * @param {string} confirmationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionContractsByTokenActivationContractItem(confirmationToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractContractCollectionContractReadByTokenDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionContractsByTokenActivationContractItem(confirmationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Contract resources.
         * @summary Retrieves the collection of Contract resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [user] 
         * @param {Array<string>} [user2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractCollection(page?: number, itemsPerPage?: number, user?: string, user2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContractContractReadDocumentation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractCollection(page, itemsPerPage, user, user2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Contract resource.
         * @summary Retrieves a Contract resource.
         * @param {string} contractNumber Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractItem(contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractContractReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractItem(contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Contract resource.
         * @summary get infos contract from mulsoft
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfosContractContractItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractInfosContractContractInfosReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfosContractContractItem(typeContract, brand, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Contract resource.
         * @summary Creates a Contract resource.
         * @param {string} [contractNumber] 
         * @param {string} [type] 
         * @param {boolean} [enabled] 
         * @param {boolean} [locked] 
         * @param {string} [externalId] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string | null} [user] 
         * @param {number} [id] 
         * @param {string | null} [creationDateAt] 
         * @param {string | null} [updateDateAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContractCollection(contractNumber?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, user?: string | null, id?: number, creationDateAt?: string | null, updateDateAt?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContractCollection(contractNumber, type, enabled, locked, externalId, firstName, lastName, user, id, creationDateAt, updateDateAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Contract resource.
         * @summary Replaces the Contract resource.
         * @param {string} contractNumber Resource identifier
         * @param {string} [contractNumber2] 
         * @param {string} [type] 
         * @param {boolean} [enabled] 
         * @param {boolean} [locked] 
         * @param {string} [externalId] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string | null} [updateDateAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putContractItem(contractNumber: string, contractNumber2?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, updateDateAt?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractContractReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putContractItem(contractNumber, contractNumber2, type, enabled, locked, externalId, firstName, lastName, updateDateAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContractApi - factory interface
 * @export
 */
export const ContractApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContractApiFp(configuration)
    return {
        /**
         * Retrieves a Contract resource.
         * @summary Retrieves a Contract resource.
         * @param {string} typeContract Type of contract
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} typeDocument Type of document to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractDownloadContractItem(typeContract: string, brand: string, contractNumber: string, typeDocument: string, options?: any): AxiosPromise<object> {
            return localVarFp.contractDownloadContractItem(typeContract, brand, contractNumber, typeDocument, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Contract resource.
         * @summary Delete contract
         * @param {string} id id contract
         * @param {string} contractNumber contractNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContractContractItem(id: string, contractNumber: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteContractContractItem(id, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Contract resource.
         * @summary get contracts by token
         * @param {string} confirmationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionContractsByTokenActivationContractItem(confirmationToken: string, options?: any): AxiosPromise<ContractContractCollectionContractReadByTokenDocumentation> {
            return localVarFp.getCollectionContractsByTokenActivationContractItem(confirmationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Contract resources.
         * @summary Retrieves the collection of Contract resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [user] 
         * @param {Array<string>} [user2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractCollection(page?: number, itemsPerPage?: number, user?: string, user2?: Array<string>, options?: any): AxiosPromise<Array<ContractContractReadDocumentation>> {
            return localVarFp.getContractCollection(page, itemsPerPage, user, user2, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Contract resource.
         * @summary Retrieves a Contract resource.
         * @param {string} contractNumber Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractItem(contractNumber: string, options?: any): AxiosPromise<ContractContractReadDocumentation> {
            return localVarFp.getContractItem(contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Contract resource.
         * @summary get infos contract from mulsoft
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosContractContractItem(typeContract: string, brand: string, contractNumber: string, options?: any): AxiosPromise<ContractInfosContractContractInfosReadDocumentation> {
            return localVarFp.getInfosContractContractItem(typeContract, brand, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Contract resource.
         * @summary Creates a Contract resource.
         * @param {string} [contractNumber] 
         * @param {string} [type] 
         * @param {boolean} [enabled] 
         * @param {boolean} [locked] 
         * @param {string} [externalId] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string | null} [user] 
         * @param {number} [id] 
         * @param {string | null} [creationDateAt] 
         * @param {string | null} [updateDateAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContractCollection(contractNumber?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, user?: string | null, id?: number, creationDateAt?: string | null, updateDateAt?: string | null, options?: any): AxiosPromise<object> {
            return localVarFp.postContractCollection(contractNumber, type, enabled, locked, externalId, firstName, lastName, user, id, creationDateAt, updateDateAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Contract resource.
         * @summary Replaces the Contract resource.
         * @param {string} contractNumber Resource identifier
         * @param {string} [contractNumber2] 
         * @param {string} [type] 
         * @param {boolean} [enabled] 
         * @param {boolean} [locked] 
         * @param {string} [externalId] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string | null} [updateDateAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContractItem(contractNumber: string, contractNumber2?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, updateDateAt?: string | null, options?: any): AxiosPromise<ContractContractReadDocumentation> {
            return localVarFp.putContractItem(contractNumber, contractNumber2, type, enabled, locked, externalId, firstName, lastName, updateDateAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContractApi - interface
 * @export
 * @interface ContractApi
 */
export interface ContractApiInterface {
    /**
     * Retrieves a Contract resource.
     * @summary Retrieves a Contract resource.
     * @param {string} typeContract Type of contract
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {string} typeDocument Type of document to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    contractDownloadContractItem(typeContract: string, brand: string, contractNumber: string, typeDocument: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Removes the Contract resource.
     * @summary Delete contract
     * @param {string} id id contract
     * @param {string} contractNumber contractNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    deleteContractContractItem(id: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Retrieves a Contract resource.
     * @summary get contracts by token
     * @param {string} confirmationToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    getCollectionContractsByTokenActivationContractItem(confirmationToken: string, options?: AxiosRequestConfig): AxiosPromise<ContractContractCollectionContractReadByTokenDocumentation>;

    /**
     * Retrieves the collection of Contract resources.
     * @summary Retrieves the collection of Contract resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {string} [user] 
     * @param {Array<string>} [user2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    getContractCollection(page?: number, itemsPerPage?: number, user?: string, user2?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<ContractContractReadDocumentation>>;

    /**
     * Retrieves a Contract resource.
     * @summary Retrieves a Contract resource.
     * @param {string} contractNumber Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    getContractItem(contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<ContractContractReadDocumentation>;

    /**
     * Retrieves a Contract resource.
     * @summary get infos contract from mulsoft
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    getInfosContractContractItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<ContractInfosContractContractInfosReadDocumentation>;

    /**
     * Creates a Contract resource.
     * @summary Creates a Contract resource.
     * @param {string} [contractNumber] 
     * @param {string} [type] 
     * @param {boolean} [enabled] 
     * @param {boolean} [locked] 
     * @param {string} [externalId] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string | null} [user] 
     * @param {number} [id] 
     * @param {string | null} [creationDateAt] 
     * @param {string | null} [updateDateAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    postContractCollection(contractNumber?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, user?: string | null, id?: number, creationDateAt?: string | null, updateDateAt?: string | null, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Replaces the Contract resource.
     * @summary Replaces the Contract resource.
     * @param {string} contractNumber Resource identifier
     * @param {string} [contractNumber2] 
     * @param {string} [type] 
     * @param {boolean} [enabled] 
     * @param {boolean} [locked] 
     * @param {string} [externalId] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string | null} [updateDateAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApiInterface
     */
    putContractItem(contractNumber: string, contractNumber2?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, updateDateAt?: string | null, options?: AxiosRequestConfig): AxiosPromise<ContractContractReadDocumentation>;

}

/**
 * ContractApi - object-oriented interface
 * @export
 * @class ContractApi
 * @extends {BaseAPI}
 */
export class ContractApi extends BaseAPI implements ContractApiInterface {
    /**
     * Retrieves a Contract resource.
     * @summary Retrieves a Contract resource.
     * @param {string} typeContract Type of contract
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {string} typeDocument Type of document to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public contractDownloadContractItem(typeContract: string, brand: string, contractNumber: string, typeDocument: string, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).contractDownloadContractItem(typeContract, brand, contractNumber, typeDocument, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Contract resource.
     * @summary Delete contract
     * @param {string} id id contract
     * @param {string} contractNumber contractNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public deleteContractContractItem(id: string, contractNumber: string, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).deleteContractContractItem(id, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Contract resource.
     * @summary get contracts by token
     * @param {string} confirmationToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public getCollectionContractsByTokenActivationContractItem(confirmationToken: string, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).getCollectionContractsByTokenActivationContractItem(confirmationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Contract resources.
     * @summary Retrieves the collection of Contract resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {string} [user] 
     * @param {Array<string>} [user2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public getContractCollection(page?: number, itemsPerPage?: number, user?: string, user2?: Array<string>, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).getContractCollection(page, itemsPerPage, user, user2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Contract resource.
     * @summary Retrieves a Contract resource.
     * @param {string} contractNumber Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public getContractItem(contractNumber: string, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).getContractItem(contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Contract resource.
     * @summary get infos contract from mulsoft
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public getInfosContractContractItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).getInfosContractContractItem(typeContract, brand, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Contract resource.
     * @summary Creates a Contract resource.
     * @param {string} [contractNumber] 
     * @param {string} [type] 
     * @param {boolean} [enabled] 
     * @param {boolean} [locked] 
     * @param {string} [externalId] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string | null} [user] 
     * @param {number} [id] 
     * @param {string | null} [creationDateAt] 
     * @param {string | null} [updateDateAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public postContractCollection(contractNumber?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, user?: string | null, id?: number, creationDateAt?: string | null, updateDateAt?: string | null, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).postContractCollection(contractNumber, type, enabled, locked, externalId, firstName, lastName, user, id, creationDateAt, updateDateAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Contract resource.
     * @summary Replaces the Contract resource.
     * @param {string} contractNumber Resource identifier
     * @param {string} [contractNumber2] 
     * @param {string} [type] 
     * @param {boolean} [enabled] 
     * @param {boolean} [locked] 
     * @param {string} [externalId] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string | null} [updateDateAt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractApi
     */
    public putContractItem(contractNumber: string, contractNumber2?: string, type?: string, enabled?: boolean, locked?: boolean, externalId?: string, firstName?: string, lastName?: string, updateDateAt?: string | null, options?: AxiosRequestConfig) {
        return ContractApiFp(this.configuration).putContractItem(contractNumber, contractNumber2, type, enabled, locked, externalId, firstName, lastName, updateDateAt, options).then((request) => request(this.axios, this.basePath));
    }
}

