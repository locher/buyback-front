/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service
 * API for Customer Service
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetControlConfirmationTokenBeforeChangePasswordUserCollection200Response } from '../models';
// @ts-ignore
import { GetUserCollection200Response } from '../models';
// @ts-ignore
import { UserContractSubscribeRequestInputUserSubscribeDocumentation } from '../models';
// @ts-ignore
import { UserJsonldDocumentation } from '../models';
// @ts-ignore
import { UserJsonldUserReadDocumentation } from '../models';
// @ts-ignore
import { UserResponseOutputJsonldDocumentation } from '../models';
// @ts-ignore
import { UserResponseOutputJsonldUserSendSmsAccountByContractNumberDocumentation } from '../models';
// @ts-ignore
import { UserResponseOutputJsonldUserUnlockContractDocumentation } from '../models';
// @ts-ignore
import { UserResponseOutputUserSendSmsAccountByContractNumberDocumentation } from '../models';
// @ts-ignore
import { UserResponseOutputUserUnlockContractDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputJsonldUserEvasionSessionDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputJsonldUserFujifilmSessionDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputJsonldUserHubsideWebSessionDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputJsonldUserPlebicomSessionDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputUserEvasionSessionDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputUserFujifilmSessionDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputUserHubsideWebSessionDocumentation } from '../models';
// @ts-ignore
import { UserSessionSsoOutputUserPlebicomSessionDocumentation } from '../models';
// @ts-ignore
import { UserTokenJsonldDocumentation } from '../models';
// @ts-ignore
import { UserTokenJsonldUserUpdateEmailUserChangePasswordDocumentation } from '../models';
// @ts-ignore
import { UserTokenUserUpdateEmailUserChangePasswordDocumentation } from '../models';
// @ts-ignore
import { UserUserReadDocumentation } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of User resources.
         * @summary Page expired or display form change password
         * @param {string} confirmationToken Confirmation Token
         * @param {string} brand Mark contract
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControlConfirmationTokenBeforeChangePasswordUserCollection: async (confirmationToken: string, brand: string, page?: number, itemsPerPage?: number, groups?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'confirmationToken' is not null or undefined
            assertParamExists('getControlConfirmationTokenBeforeChangePasswordUserCollection', 'confirmationToken', confirmationToken)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getControlConfirmationTokenBeforeChangePasswordUserCollection', 'brand', brand)
            const localVarPath = `/api/user/{brand}/change-password/control/{confirmationToken}`
                .replace(`{${"confirmationToken"}}`, encodeURIComponent(String(confirmationToken)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (groups) {
                localVarQueryParameter['groups[]'] = groups;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary get session evasion
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionEvasionUserCollection: async (brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getSessionEvasionUserCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getSessionEvasionUserCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getSessionEvasionUserCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('getSessionEvasionUserCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getSessionEvasionUserCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('getSessionEvasionUserCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('getSessionEvasionUserCollection', 'languageCode', languageCode)
            const localVarPath = `/api/user/evasion-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary get session fujifilm
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string | null} [sessionKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionFujifilmUserCollection: async (brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getSessionFujifilmUserCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getSessionFujifilmUserCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getSessionFujifilmUserCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('getSessionFujifilmUserCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getSessionFujifilmUserCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('getSessionFujifilmUserCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('getSessionFujifilmUserCollection', 'languageCode', languageCode)
            const localVarPath = `/api/user/fujifilm-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (sessionKey !== undefined) { 
                localVarFormParams.append('sessionKey', sessionKey as any);
            }
    
            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary get session Hubside Web
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionHubsideWebUserCollection: async (brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getSessionHubsideWebUserCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getSessionHubsideWebUserCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getSessionHubsideWebUserCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('getSessionHubsideWebUserCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getSessionHubsideWebUserCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('getSessionHubsideWebUserCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('getSessionHubsideWebUserCollection', 'languageCode', languageCode)
            const localVarPath = `/api/user/hubside-web-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary get session Plebicom
         * @param {number} rate 
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionPlebicomUserCollection: async (rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rate' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'rate', rate)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('getSessionPlebicomUserCollection', 'languageCode', languageCode)
            const localVarPath = `/api/user/plebicom-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (rate !== undefined) { 
                localVarFormParams.append('rate', rate as any);
            }
    
            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of User resources.
         * @summary Retrieves the collection of User resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection: async (page?: number, itemsPerPage?: number, groups?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (groups) {
                localVarQueryParameter['groups[]'] = groups;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a User resource.
         * @summary Retrieves a User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserItem', 'id', id)
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Send message from contact.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} subject 
         * @param {string} content 
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContactSendMessageUserCollection: async (brand: string, subject: string, content: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postContactSendMessageUserCollection', 'brand', brand)
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('postContactSendMessageUserCollection', 'subject', subject)
            // verify required parameter 'content' is not null or undefined
            assertParamExists('postContactSendMessageUserCollection', 'content', content)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postContactSendMessageUserCollection', 'contractNumber', contractNumber)
            const localVarPath = `/api/user/{brand}/contact`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (subject !== undefined) { 
                localVarFormParams.append('subject', subject as any);
            }
    
            if (content !== undefined) { 
                localVarFormParams.append('content', content as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} confirmationToken 
         * @param {string} smsCode 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserActivateUserCollection: async (brand: string, confirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserActivateUserCollection', 'brand', brand)
            // verify required parameter 'confirmationToken' is not null or undefined
            assertParamExists('postUserActivateUserCollection', 'confirmationToken', confirmationToken)
            // verify required parameter 'smsCode' is not null or undefined
            assertParamExists('postUserActivateUserCollection', 'smsCode', smsCode)
            const localVarPath = `/api/user/{brand}/activate-account/{confirmationToken}`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"confirmationToken"}}`, encodeURIComponent(String(confirmationToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (newPassword !== undefined) { 
                localVarFormParams.append('newPassword', newPassword as any);
            }
    
            if (confirmPassword !== undefined) { 
                localVarFormParams.append('confirmPassword', confirmPassword as any);
            }
    
            if (smsCode !== undefined) { 
                localVarFormParams.append('smsCode', smsCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Change password of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} confirmationToken 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserChangePasswordUserCollection: async (brand: string, confirmationToken: string, newPassword?: string, confirmPassword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserChangePasswordUserCollection', 'brand', brand)
            // verify required parameter 'confirmationToken' is not null or undefined
            assertParamExists('postUserChangePasswordUserCollection', 'confirmationToken', confirmationToken)
            const localVarPath = `/api/user/{brand}/change-password/{confirmationToken}`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"confirmationToken"}}`, encodeURIComponent(String(confirmationToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (newPassword !== undefined) { 
                localVarFormParams.append('newPassword', newPassword as any);
            }
    
            if (confirmPassword !== undefined) { 
                localVarFormParams.append('confirmPassword', confirmPassword as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Reset password request in order to change password of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserResetPasswordUserCollection: async (brand: string, email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserResetPasswordUserCollection', 'brand', brand)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('postUserResetPasswordUserCollection', 'email', email)
            const localVarPath = `/api/user/{brand}/reset-password`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Request to send SMS by contract number in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserSendSmsByContractNumberUserCollection: async (brand: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserSendSmsByContractNumberUserCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postUserSendSmsByContractNumberUserCollection', 'contractNumber', contractNumber)
            const localVarPath = `/api/user/{brand}/send-sms-by-contract-number`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Request to send SMS in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string | null} confirmationToken 
         * @param {string | null} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserSendSmsUserCollection: async (brand: string, confirmationToken: string | null, contractNumber: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserSendSmsUserCollection', 'brand', brand)
            // verify required parameter 'confirmationToken' is not null or undefined
            assertParamExists('postUserSendSmsUserCollection', 'confirmationToken', confirmationToken)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postUserSendSmsUserCollection', 'contractNumber', contractNumber)
            const localVarPath = `/api/user/{brand}/sms-account`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (confirmationToken !== undefined) { 
                localVarFormParams.append('confirmationToken', confirmationToken as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Subscribe user.
         * @param {string | null} brand 
         * @param {string | null} email 
         * @param {string | null} firstName 
         * @param {string | null} lastName 
         * @param {string | null} languageCode 
         * @param {string | null} countryCode 
         * @param {string} phoneNumber 
         * @param {Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>} [contracts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserSubscribeUserCollection: async (brand: string | null, email: string | null, firstName: string | null, lastName: string | null, languageCode: string | null, countryCode: string | null, phoneNumber: string, contracts?: Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserSubscribeUserCollection', 'brand', brand)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('postUserSubscribeUserCollection', 'email', email)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('postUserSubscribeUserCollection', 'firstName', firstName)
            // verify required parameter 'lastName' is not null or undefined
            assertParamExists('postUserSubscribeUserCollection', 'lastName', lastName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('postUserSubscribeUserCollection', 'languageCode', languageCode)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('postUserSubscribeUserCollection', 'countryCode', countryCode)
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('postUserSubscribeUserCollection', 'phoneNumber', phoneNumber)
            const localVarPath = `/api/user/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('firstName', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('lastName', lastName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
            if (countryCode !== undefined) { 
                localVarFormParams.append('countryCode', countryCode as any);
            }
    
            if (phoneNumber !== undefined) { 
                localVarFormParams.append('phoneNumber', phoneNumber as any);
            }
                if (contracts) {
                localVarFormParams.append('contracts', contracts.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Request to unlock contract.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} smsCode 
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUnlockContractUserCollection: async (brand: string, smsCode: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserUnlockContractUserCollection', 'brand', brand)
            // verify required parameter 'smsCode' is not null or undefined
            assertParamExists('postUserUnlockContractUserCollection', 'smsCode', smsCode)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postUserUnlockContractUserCollection', 'contractNumber', contractNumber)
            const localVarPath = `/api/user/{brand}/unlock-contract`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (smsCode !== undefined) { 
                localVarFormParams.append('smsCode', smsCode as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User resource.
         * @summary Update email of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} emailConfirmationToken 
         * @param {string} smsCode 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUpdateEmailUserCollection: async (brand: string, emailConfirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postUserUpdateEmailUserCollection', 'brand', brand)
            // verify required parameter 'emailConfirmationToken' is not null or undefined
            assertParamExists('postUserUpdateEmailUserCollection', 'emailConfirmationToken', emailConfirmationToken)
            // verify required parameter 'smsCode' is not null or undefined
            assertParamExists('postUserUpdateEmailUserCollection', 'smsCode', smsCode)
            const localVarPath = `/api/user/{brand}/update-email/{emailConfirmationToken}`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"emailConfirmationToken"}}`, encodeURIComponent(String(emailConfirmationToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (newPassword !== undefined) { 
                localVarFormParams.append('newPassword', newPassword as any);
            }
    
            if (confirmPassword !== undefined) { 
                localVarFormParams.append('confirmPassword', confirmPassword as any);
            }
    
            if (smsCode !== undefined) { 
                localVarFormParams.append('smsCode', smsCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {string} id Resource identifier
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserItem: async (id: string, firstName?: string, lastName?: string, username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUserItem', 'id', id)
            const localVarPath = `/api/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (firstName !== undefined) { 
                localVarFormParams.append('firstName', firstName as any);
            }
    
            if (lastName !== undefined) { 
                localVarFormParams.append('lastName', lastName as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.append('username', username as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of User resources.
         * @summary Page expired or display form change password
         * @param {string} confirmationToken Confirmation Token
         * @param {string} brand Mark contract
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getControlConfirmationTokenBeforeChangePasswordUserCollection(confirmationToken: string, brand: string, page?: number, itemsPerPage?: number, groups?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getControlConfirmationTokenBeforeChangePasswordUserCollection(confirmationToken, brand, page, itemsPerPage, groups, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary get session evasion
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionEvasionUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSessionSsoOutputUserEvasionSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionEvasionUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary get session fujifilm
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string | null} [sessionKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionFujifilmUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSessionSsoOutputUserFujifilmSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionFujifilmUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, sessionKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary get session Hubside Web
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionHubsideWebUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSessionSsoOutputUserHubsideWebSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionHubsideWebUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary get session Plebicom
         * @param {number} rate 
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionPlebicomUserCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSessionSsoOutputUserPlebicomSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionPlebicomUserCollection(rate, brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of User resources.
         * @summary Retrieves the collection of User resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCollection(page?: number, itemsPerPage?: number, groups?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserUserReadDocumentation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCollection(page, itemsPerPage, groups, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a User resource.
         * @summary Retrieves a User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUserReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Send message from contact.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} subject 
         * @param {string} content 
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContactSendMessageUserCollection(brand: string, subject: string, content: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContactSendMessageUserCollection(brand, subject, content, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} confirmationToken 
         * @param {string} smsCode 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserActivateUserCollection(brand: string, confirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserActivateUserCollection(brand, confirmationToken, smsCode, newPassword, confirmPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Change password of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} confirmationToken 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserChangePasswordUserCollection(brand: string, confirmationToken: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserChangePasswordUserCollection(brand, confirmationToken, newPassword, confirmPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Reset password request in order to change password of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserResetPasswordUserCollection(brand: string, email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserResetPasswordUserCollection(brand, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Request to send SMS by contract number in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserSendSmsByContractNumberUserCollection(brand: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseOutputUserSendSmsAccountByContractNumberDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserSendSmsByContractNumberUserCollection(brand, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Request to send SMS in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string | null} confirmationToken 
         * @param {string | null} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserSendSmsUserCollection(brand: string, confirmationToken: string | null, contractNumber: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserSendSmsUserCollection(brand, confirmationToken, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Subscribe user.
         * @param {string | null} brand 
         * @param {string | null} email 
         * @param {string | null} firstName 
         * @param {string | null} lastName 
         * @param {string | null} languageCode 
         * @param {string | null} countryCode 
         * @param {string} phoneNumber 
         * @param {Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>} [contracts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserSubscribeUserCollection(brand: string | null, email: string | null, firstName: string | null, lastName: string | null, languageCode: string | null, countryCode: string | null, phoneNumber: string, contracts?: Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserSubscribeUserCollection(brand, email, firstName, lastName, languageCode, countryCode, phoneNumber, contracts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Request to unlock contract.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} smsCode 
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserUnlockContractUserCollection(brand: string, smsCode: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseOutputUserUnlockContractDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserUnlockContractUserCollection(brand, smsCode, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a User resource.
         * @summary Update email of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} emailConfirmationToken 
         * @param {string} smsCode 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserUpdateEmailUserCollection(brand: string, emailConfirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTokenUserUpdateEmailUserChangePasswordDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserUpdateEmailUserCollection(brand, emailConfirmationToken, smsCode, newPassword, confirmPassword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {string} id Resource identifier
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserItem(id: string, firstName?: string, lastName?: string, username?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUserReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserItem(id, firstName, lastName, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Retrieves the collection of User resources.
         * @summary Page expired or display form change password
         * @param {string} confirmationToken Confirmation Token
         * @param {string} brand Mark contract
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControlConfirmationTokenBeforeChangePasswordUserCollection(confirmationToken: string, brand: string, page?: number, itemsPerPage?: number, groups?: Array<string>, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getControlConfirmationTokenBeforeChangePasswordUserCollection(confirmationToken, brand, page, itemsPerPage, groups, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary get session evasion
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionEvasionUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: any): AxiosPromise<UserSessionSsoOutputUserEvasionSessionDocumentation> {
            return localVarFp.getSessionEvasionUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary get session fujifilm
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string | null} [sessionKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionFujifilmUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: any): AxiosPromise<UserSessionSsoOutputUserFujifilmSessionDocumentation> {
            return localVarFp.getSessionFujifilmUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, sessionKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary get session Hubside Web
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionHubsideWebUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: any): AxiosPromise<UserSessionSsoOutputUserHubsideWebSessionDocumentation> {
            return localVarFp.getSessionHubsideWebUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary get session Plebicom
         * @param {number} rate 
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionPlebicomUserCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: any): AxiosPromise<UserSessionSsoOutputUserPlebicomSessionDocumentation> {
            return localVarFp.getSessionPlebicomUserCollection(rate, brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of User resources.
         * @summary Retrieves the collection of User resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {Array<string>} [groups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection(page?: number, itemsPerPage?: number, groups?: Array<string>, options?: any): AxiosPromise<Array<UserUserReadDocumentation>> {
            return localVarFp.getUserCollection(page, itemsPerPage, groups, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a User resource.
         * @summary Retrieves a User resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserItem(id: string, options?: any): AxiosPromise<UserUserReadDocumentation> {
            return localVarFp.getUserItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Send message from contact.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} subject 
         * @param {string} content 
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContactSendMessageUserCollection(brand: string, subject: string, content: string, contractNumber: string, options?: any): AxiosPromise<void> {
            return localVarFp.postContactSendMessageUserCollection(brand, subject, content, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} confirmationToken 
         * @param {string} smsCode 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserActivateUserCollection(brand: string, confirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: any): AxiosPromise<object> {
            return localVarFp.postUserActivateUserCollection(brand, confirmationToken, smsCode, newPassword, confirmPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Change password of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} confirmationToken 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserChangePasswordUserCollection(brand: string, confirmationToken: string, newPassword?: string, confirmPassword?: string, options?: any): AxiosPromise<object> {
            return localVarFp.postUserChangePasswordUserCollection(brand, confirmationToken, newPassword, confirmPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Reset password request in order to change password of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserResetPasswordUserCollection(brand: string, email: string, options?: any): AxiosPromise<object> {
            return localVarFp.postUserResetPasswordUserCollection(brand, email, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Request to send SMS by contract number in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserSendSmsByContractNumberUserCollection(brand: string, contractNumber: string, options?: any): AxiosPromise<UserResponseOutputUserSendSmsAccountByContractNumberDocumentation> {
            return localVarFp.postUserSendSmsByContractNumberUserCollection(brand, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Request to send SMS in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string | null} confirmationToken 
         * @param {string | null} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserSendSmsUserCollection(brand: string, confirmationToken: string | null, contractNumber: string | null, options?: any): AxiosPromise<object> {
            return localVarFp.postUserSendSmsUserCollection(brand, confirmationToken, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Subscribe user.
         * @param {string | null} brand 
         * @param {string | null} email 
         * @param {string | null} firstName 
         * @param {string | null} lastName 
         * @param {string | null} languageCode 
         * @param {string | null} countryCode 
         * @param {string} phoneNumber 
         * @param {Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>} [contracts] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserSubscribeUserCollection(brand: string | null, email: string | null, firstName: string | null, lastName: string | null, languageCode: string | null, countryCode: string | null, phoneNumber: string, contracts?: Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>, options?: any): AxiosPromise<object> {
            return localVarFp.postUserSubscribeUserCollection(brand, email, firstName, lastName, languageCode, countryCode, phoneNumber, contracts, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Request to unlock contract.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} smsCode 
         * @param {string} contractNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUnlockContractUserCollection(brand: string, smsCode: string, contractNumber: string, options?: any): AxiosPromise<UserResponseOutputUserUnlockContractDocumentation> {
            return localVarFp.postUserUnlockContractUserCollection(brand, smsCode, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User resource.
         * @summary Update email of a User resource.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} emailConfirmationToken 
         * @param {string} smsCode 
         * @param {string} [newPassword] 
         * @param {string} [confirmPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserUpdateEmailUserCollection(brand: string, emailConfirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: any): AxiosPromise<UserTokenUserUpdateEmailUserChangePasswordDocumentation> {
            return localVarFp.postUserUpdateEmailUserCollection(brand, emailConfirmationToken, smsCode, newPassword, confirmPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the User resource.
         * @summary Replaces the User resource.
         * @param {string} id Resource identifier
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserItem(id: string, firstName?: string, lastName?: string, username?: string, options?: any): AxiosPromise<UserUserReadDocumentation> {
            return localVarFp.putUserItem(id, firstName, lastName, username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * Retrieves the collection of User resources.
     * @summary Page expired or display form change password
     * @param {string} confirmationToken Confirmation Token
     * @param {string} brand Mark contract
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {Array<string>} [groups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getControlConfirmationTokenBeforeChangePasswordUserCollection(confirmationToken: string, brand: string, page?: number, itemsPerPage?: number, groups?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<object>>;

    /**
     * Creates a User resource.
     * @summary get session evasion
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getSessionEvasionUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): AxiosPromise<UserSessionSsoOutputUserEvasionSessionDocumentation>;

    /**
     * Creates a User resource.
     * @summary get session fujifilm
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {string | null} [sessionKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getSessionFujifilmUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: AxiosRequestConfig): AxiosPromise<UserSessionSsoOutputUserFujifilmSessionDocumentation>;

    /**
     * Creates a User resource.
     * @summary get session Hubside Web
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getSessionHubsideWebUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): AxiosPromise<UserSessionSsoOutputUserHubsideWebSessionDocumentation>;

    /**
     * Creates a User resource.
     * @summary get session Plebicom
     * @param {number} rate 
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getSessionPlebicomUserCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): AxiosPromise<UserSessionSsoOutputUserPlebicomSessionDocumentation>;

    /**
     * Retrieves the collection of User resources.
     * @summary Retrieves the collection of User resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {Array<string>} [groups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserCollection(page?: number, itemsPerPage?: number, groups?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<Array<UserUserReadDocumentation>>;

    /**
     * Retrieves a User resource.
     * @summary Retrieves a User resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserItem(id: string, options?: AxiosRequestConfig): AxiosPromise<UserUserReadDocumentation>;

    /**
     * Creates a User resource.
     * @summary Send message from contact.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} subject 
     * @param {string} content 
     * @param {string} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postContactSendMessageUserCollection(brand: string, subject: string, content: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Creates a User resource.
     * @summary Activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} confirmationToken 
     * @param {string} smsCode 
     * @param {string} [newPassword] 
     * @param {string} [confirmPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserActivateUserCollection(brand: string, confirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Creates a User resource.
     * @summary Change password of a User resource.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} confirmationToken 
     * @param {string} [newPassword] 
     * @param {string} [confirmPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserChangePasswordUserCollection(brand: string, confirmationToken: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Creates a User resource.
     * @summary Reset password request in order to change password of a User resource.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserResetPasswordUserCollection(brand: string, email: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Creates a User resource.
     * @summary Request to send SMS by contract number in order to activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserSendSmsByContractNumberUserCollection(brand: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<UserResponseOutputUserSendSmsAccountByContractNumberDocumentation>;

    /**
     * Creates a User resource.
     * @summary Request to send SMS in order to activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string | null} confirmationToken 
     * @param {string | null} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserSendSmsUserCollection(brand: string, confirmationToken: string | null, contractNumber: string | null, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Creates a User resource.
     * @summary Subscribe user.
     * @param {string | null} brand 
     * @param {string | null} email 
     * @param {string | null} firstName 
     * @param {string | null} lastName 
     * @param {string | null} languageCode 
     * @param {string | null} countryCode 
     * @param {string} phoneNumber 
     * @param {Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>} [contracts] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserSubscribeUserCollection(brand: string | null, email: string | null, firstName: string | null, lastName: string | null, languageCode: string | null, countryCode: string | null, phoneNumber: string, contracts?: Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Creates a User resource.
     * @summary Request to unlock contract.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} smsCode 
     * @param {string} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserUnlockContractUserCollection(brand: string, smsCode: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<UserResponseOutputUserUnlockContractDocumentation>;

    /**
     * Creates a User resource.
     * @summary Update email of a User resource.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} emailConfirmationToken 
     * @param {string} smsCode 
     * @param {string} [newPassword] 
     * @param {string} [confirmPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserUpdateEmailUserCollection(brand: string, emailConfirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig): AxiosPromise<UserTokenUserUpdateEmailUserChangePasswordDocumentation>;

    /**
     * Replaces the User resource.
     * @summary Replaces the User resource.
     * @param {string} id Resource identifier
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    putUserItem(id: string, firstName?: string, lastName?: string, username?: string, options?: AxiosRequestConfig): AxiosPromise<UserUserReadDocumentation>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * Retrieves the collection of User resources.
     * @summary Page expired or display form change password
     * @param {string} confirmationToken Confirmation Token
     * @param {string} brand Mark contract
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {Array<string>} [groups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getControlConfirmationTokenBeforeChangePasswordUserCollection(confirmationToken: string, brand: string, page?: number, itemsPerPage?: number, groups?: Array<string>, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getControlConfirmationTokenBeforeChangePasswordUserCollection(confirmationToken, brand, page, itemsPerPage, groups, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary get session evasion
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getSessionEvasionUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getSessionEvasionUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary get session fujifilm
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {string | null} [sessionKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getSessionFujifilmUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getSessionFujifilmUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, sessionKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary get session Hubside Web
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getSessionHubsideWebUserCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getSessionHubsideWebUserCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary get session Plebicom
     * @param {number} rate 
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getSessionPlebicomUserCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getSessionPlebicomUserCollection(rate, brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of User resources.
     * @summary Retrieves the collection of User resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {Array<string>} [groups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserCollection(page?: number, itemsPerPage?: number, groups?: Array<string>, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserCollection(page, itemsPerPage, groups, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a User resource.
     * @summary Retrieves a User resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserItem(id: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Send message from contact.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} subject 
     * @param {string} content 
     * @param {string} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postContactSendMessageUserCollection(brand: string, subject: string, content: string, contractNumber: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postContactSendMessageUserCollection(brand, subject, content, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} confirmationToken 
     * @param {string} smsCode 
     * @param {string} [newPassword] 
     * @param {string} [confirmPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserActivateUserCollection(brand: string, confirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserActivateUserCollection(brand, confirmationToken, smsCode, newPassword, confirmPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Change password of a User resource.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} confirmationToken 
     * @param {string} [newPassword] 
     * @param {string} [confirmPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserChangePasswordUserCollection(brand: string, confirmationToken: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserChangePasswordUserCollection(brand, confirmationToken, newPassword, confirmPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Reset password request in order to change password of a User resource.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserResetPasswordUserCollection(brand: string, email: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserResetPasswordUserCollection(brand, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Request to send SMS by contract number in order to activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserSendSmsByContractNumberUserCollection(brand: string, contractNumber: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserSendSmsByContractNumberUserCollection(brand, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Request to send SMS in order to activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string | null} confirmationToken 
     * @param {string | null} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserSendSmsUserCollection(brand: string, confirmationToken: string | null, contractNumber: string | null, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserSendSmsUserCollection(brand, confirmationToken, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Subscribe user.
     * @param {string | null} brand 
     * @param {string | null} email 
     * @param {string | null} firstName 
     * @param {string | null} lastName 
     * @param {string | null} languageCode 
     * @param {string | null} countryCode 
     * @param {string} phoneNumber 
     * @param {Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>} [contracts] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserSubscribeUserCollection(brand: string | null, email: string | null, firstName: string | null, lastName: string | null, languageCode: string | null, countryCode: string | null, phoneNumber: string, contracts?: Array<UserContractSubscribeRequestInputUserSubscribeDocumentation>, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserSubscribeUserCollection(brand, email, firstName, lastName, languageCode, countryCode, phoneNumber, contracts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Request to unlock contract.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} smsCode 
     * @param {string} contractNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserUnlockContractUserCollection(brand: string, smsCode: string, contractNumber: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserUnlockContractUserCollection(brand, smsCode, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User resource.
     * @summary Update email of a User resource.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} emailConfirmationToken 
     * @param {string} smsCode 
     * @param {string} [newPassword] 
     * @param {string} [confirmPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserUpdateEmailUserCollection(brand: string, emailConfirmationToken: string, smsCode: string, newPassword?: string, confirmPassword?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserUpdateEmailUserCollection(brand, emailConfirmationToken, smsCode, newPassword, confirmPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the User resource.
     * @summary Replaces the User resource.
     * @param {string} id Resource identifier
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public putUserItem(id: string, firstName?: string, lastName?: string, username?: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).putUserItem(id, firstName, lastName, username, options).then((request) => request(this.axios, this.basePath));
    }
}

