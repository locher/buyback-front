/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service
 * API for Customer Service
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OfferClickAndGiftOutputJsonldUserClickAndGiftCreateDocumentation } from '../models';
// @ts-ignore
import { OfferClickAndGiftOutputUserClickAndGiftCreateDocumentation } from '../models';
// @ts-ignore
import { OfferFavoriteShopOfferOutputActivateOfferDocumentation } from '../models';
// @ts-ignore
import { OfferFavoriteShopOfferOutputJsonldActivateOfferDocumentation } from '../models';
// @ts-ignore
import { OfferInfoClickAndGiftPartnerOutputAccountClickAndGiftInfosDocumentation } from '../models';
// @ts-ignore
import { OfferInfoClickAndGiftPartnerOutputJsonldAccountClickAndGiftInfosDocumentation } from '../models';
// @ts-ignore
import { OfferJsonldAccountAdvantageDocumentation } from '../models';
// @ts-ignore
import { OfferMultiShopPartnerInfoOutputAccountMultiShopPartnerDocumentation } from '../models';
// @ts-ignore
import { OfferMultiShopPartnerInfoOutputJsonldAccountMultiShopPartnerDocumentation } from '../models';
// @ts-ignore
import { OfferOfferOutputJsonldOfferConsumedExpiredDocumentation } from '../models';
// @ts-ignore
import { OfferOfferOutputJsonldOfferEvasionDocumentation } from '../models';
// @ts-ignore
import { OfferOfferOutputJsonldOfferFavoriteGiftAvailableDocumentation } from '../models';
// @ts-ignore
import { OfferOfferOutputOfferConsumedExpiredDocumentation } from '../models';
// @ts-ignore
import { OfferOfferOutputOfferEvasionDocumentation } from '../models';
// @ts-ignore
import { OfferOfferOutputOfferFavoriteGiftAvailableDocumentation } from '../models';
// @ts-ignore
import { OfferServiceCodeOutputJsonldOfferServiceCodeDocumentation } from '../models';
// @ts-ignore
import { OfferServiceCodeOutputOfferServiceCodeDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputJsonldUserEvasionSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputJsonldUserFujifilmSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputJsonldUserHubsideWebSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputJsonldUserPlebicomSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputUserEvasionSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputUserFujifilmSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputUserHubsideWebSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSessionSsoOutputUserPlebicomSessionDocumentation } from '../models';
// @ts-ignore
import { OfferSuccessActivateOfferOutputActivateOfferDocumentation } from '../models';
// @ts-ignore
import { OfferSuccessActivateOfferOutputJsonldActivateOfferDocumentation } from '../models';
/**
 * OfferApi - axios parameter creator
 * @export
 */
export const OfferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Offer resource.
         * @summary Create card click and gift
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string} [amount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCardClickAndGiftOfferCollection: async (brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, amount?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('createCardClickAndGiftOfferCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('createCardClickAndGiftOfferCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('createCardClickAndGiftOfferCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('createCardClickAndGiftOfferCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('createCardClickAndGiftOfferCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('createCardClickAndGiftOfferCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('createCardClickAndGiftOfferCollection', 'languageCode', languageCode)
            const localVarPath = `/api/offer/click-and-gift/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (amount !== undefined) { 
                localVarFormParams.append('amount', amount as any);
            }
    
            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos advantages
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvantagesOfferItem: async (typeContract: string, brand: string, contractNumber: string, packageName?: string, languageCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getAdvantagesOfferItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getAdvantagesOfferItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getAdvantagesOfferItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/offer/{typeContract}/{brand}/{contractNumber}/advantage`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['languageCode'] = languageCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Offer resource.
         * @summary Get consumed and expired offers
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumedExpiredOfferOfferItem: async (typeContract: string, brand: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getConsumedExpiredOfferOfferItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getConsumedExpiredOfferOfferItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getConsumedExpiredOfferOfferItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/offer/{typeContract}/{brand}/{contractNumber}/consumed-expired`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos card click and gift
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosCardClickAndGiftOfferItem: async (typeContract: string, brand: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getInfosCardClickAndGiftOfferItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getInfosCardClickAndGiftOfferItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getInfosCardClickAndGiftOfferItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/offer/{typeContract}/{brand}/{contractNumber}/click-and-gift`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos offer evasion
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosEvasionOffersOfferItem: async (typeContract: string, brand: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getInfosEvasionOffersOfferItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getInfosEvasionOffersOfferItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getInfosEvasionOffersOfferItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/offer/{typeContract}/{brand}/{contractNumber}/evasion-card`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos offer favorite shop
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosFavoriteShopOffersOfferItem: async (typeContract: string, brand: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getInfosFavoriteShopOffersOfferItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getInfosFavoriteShopOffersOfferItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getInfosFavoriteShopOffersOfferItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/offer/{typeContract}/{brand}/{contractNumber}/favorite-shop-card`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos multi shop partner
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosPartnerMultiShopOfferItem: async (typeContract: string, brand: string, contractNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getInfosPartnerMultiShopOfferItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getInfosPartnerMultiShopOfferItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getInfosPartnerMultiShopOfferItem', 'contractNumber', contractNumber)
            const localVarPath = `/api/offer/{typeContract}/{brand}/{contractNumber}/multi-shop-partner-infos`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Offer resource.
         * @summary get new code service
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} offerUuid uuid offer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewServiceCodeOfferItem: async (typeContract: string, brand: string, contractNumber: string, offerUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('getNewServiceCodeOfferItem', 'typeContract', typeContract)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getNewServiceCodeOfferItem', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getNewServiceCodeOfferItem', 'contractNumber', contractNumber)
            // verify required parameter 'offerUuid' is not null or undefined
            assertParamExists('getNewServiceCodeOfferItem', 'offerUuid', offerUuid)
            const localVarPath = `/api/offer/{typeContract}/{brand}/{contractNumber}/{offerUuid}/new-service-code`
                .replace(`{${"typeContract"}}`, encodeURIComponent(String(typeContract)))
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)))
                .replace(`{${"offerUuid"}}`, encodeURIComponent(String(offerUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Offer resource.
         * @summary activate offer
         * @param {string} amount 
         * @param {string} [brand] 
         * @param {string} [contractNumber] 
         * @param {string} [typeContract] 
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {string} [category] 
         * @param {string} [refContract] 
         * @param {string} [typeAdvantage] 
         * @param {Array<File>} [attachments] 
         * @param {string} [purchaseAmount] 
         * @param {string} [purchaseDate] 
         * @param {string} [currency] 
         * @param {string | null} [amountType] 
         * @param {string | null} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActivateFavoriteOfferOfferCollection: async (amount: string, brand?: string, contractNumber?: string, typeContract?: string, packageName?: string, languageCode?: string, name?: string, type?: string, category?: string, refContract?: string, typeAdvantage?: string, attachments?: Array<File>, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string | null, iban?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('postActivateFavoriteOfferOfferCollection', 'amount', amount)
            const localVarPath = `/api/offer/activate/favorite-offer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (category !== undefined) { 
                localVarFormParams.append('category', category as any);
            }
    
            if (refContract !== undefined) { 
                localVarFormParams.append('refContract', refContract as any);
            }
    
            if (typeAdvantage !== undefined) { 
                localVarFormParams.append('typeAdvantage', typeAdvantage as any);
            }
                if (attachments) {
                attachments.forEach((element) => {
                    localVarFormParams.append('attachments', element as any);
                })
            }

    
            if (amount !== undefined) { 
                localVarFormParams.append('amount', amount as any);
            }
    
            if (purchaseAmount !== undefined) { 
                localVarFormParams.append('purchaseAmount', purchaseAmount as any);
            }
    
            if (purchaseDate !== undefined) { 
                localVarFormParams.append('purchaseDate', purchaseDate as any);
            }
    
            if (currency !== undefined) { 
                localVarFormParams.append('currency', currency as any);
            }
    
            if (amountType !== undefined) { 
                localVarFormParams.append('amountType', amountType as any);
            }
    
            if (iban !== undefined) { 
                localVarFormParams.append('iban', iban as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Offer resource.
         * @summary activate offer classic
         * @param {string} [brand] 
         * @param {string} [contractNumber] 
         * @param {string} [typeContract] 
         * @param {string} [refContract] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {string} [category] 
         * @param {string} [amount] 
         * @param {string} [purchaseAmount] 
         * @param {string} [purchaseDate] 
         * @param {string} [currency] 
         * @param {string} [amountType] 
         * @param {string} [typeAdvantage] 
         * @param {Array<File>} [attachements] 
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActivateOfferOfferCollection: async (brand?: string, contractNumber?: string, typeContract?: string, refContract?: string, name?: string, type?: string, category?: string, amount?: string, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string, typeAdvantage?: string, attachements?: Array<File>, packageName?: string, languageCode?: string, iban?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/offer/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (refContract !== undefined) { 
                localVarFormParams.append('refContract', refContract as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (category !== undefined) { 
                localVarFormParams.append('category', category as any);
            }
    
            if (amount !== undefined) { 
                localVarFormParams.append('amount', amount as any);
            }
    
            if (purchaseAmount !== undefined) { 
                localVarFormParams.append('purchaseAmount', purchaseAmount as any);
            }
    
            if (purchaseDate !== undefined) { 
                localVarFormParams.append('purchaseDate', purchaseDate as any);
            }
    
            if (currency !== undefined) { 
                localVarFormParams.append('currency', currency as any);
            }
    
            if (amountType !== undefined) { 
                localVarFormParams.append('amountType', amountType as any);
            }
    
            if (typeAdvantage !== undefined) { 
                localVarFormParams.append('typeAdvantage', typeAdvantage as any);
            }
                if (attachements) {
                attachements.forEach((element) => {
                    localVarFormParams.append('attachements', element as any);
                })
            }

    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
            if (iban !== undefined) { 
                localVarFormParams.append('iban', iban as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Offer resource.
         * @summary Get evasion session
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionEvasionOfferCollection: async (brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postSessionEvasionOfferCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postSessionEvasionOfferCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('postSessionEvasionOfferCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('postSessionEvasionOfferCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('postSessionEvasionOfferCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('postSessionEvasionOfferCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('postSessionEvasionOfferCollection', 'languageCode', languageCode)
            const localVarPath = `/api/offer/evasion-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Offer resource.
         * @summary get session fujifilm
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string | null} [sessionKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionFujifilmOfferCollection: async (brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postSessionFujifilmOfferCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postSessionFujifilmOfferCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('postSessionFujifilmOfferCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('postSessionFujifilmOfferCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('postSessionFujifilmOfferCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('postSessionFujifilmOfferCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('postSessionFujifilmOfferCollection', 'languageCode', languageCode)
            const localVarPath = `/api/offer/fujifilm-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (sessionKey !== undefined) { 
                localVarFormParams.append('sessionKey', sessionKey as any);
            }
    
            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Offer resource.
         * @summary get session Hubside Web
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionHubsideWebOfferCollection: async (brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postSessionHubsideWebOfferCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postSessionHubsideWebOfferCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('postSessionHubsideWebOfferCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('postSessionHubsideWebOfferCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('postSessionHubsideWebOfferCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('postSessionHubsideWebOfferCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('postSessionHubsideWebOfferCollection', 'languageCode', languageCode)
            const localVarPath = `/api/offer/hubside-web-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Offer resource.
         * @summary get session Plebicom
         * @param {number} rate 
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionPlebicomOfferCollection: async (rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rate' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'rate', rate)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'brand', brand)
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'contractNumber', contractNumber)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'login', login)
            // verify required parameter 'partnerName' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'partnerName', partnerName)
            // verify required parameter 'typeContract' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'typeContract', typeContract)
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'packageName', packageName)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('postSessionPlebicomOfferCollection', 'languageCode', languageCode)
            const localVarPath = `/api/offer/plebicom-session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (rate !== undefined) { 
                localVarFormParams.append('rate', rate as any);
            }
    
            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (login !== undefined) { 
                localVarFormParams.append('login', login as any);
            }
    
            if (partnerName !== undefined) { 
                localVarFormParams.append('partnerName', partnerName as any);
            }
    
            if (typeContract !== undefined) { 
                localVarFormParams.append('typeContract', typeContract as any);
            }
    
            if (packageName !== undefined) { 
                localVarFormParams.append('packageName', packageName as any);
            }
    
            if (languageCode !== undefined) { 
                localVarFormParams.append('languageCode', languageCode as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfferApi - functional programming interface
 * @export
 */
export const OfferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OfferApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Offer resource.
         * @summary Create card click and gift
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string} [amount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCardClickAndGiftOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, amount?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferClickAndGiftOutputUserClickAndGiftCreateDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCardClickAndGiftOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, amount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos advantages
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdvantagesOfferItem(typeContract: string, brand: string, contractNumber: string, packageName?: string, languageCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdvantagesOfferItem(typeContract, brand, contractNumber, packageName, languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Offer resource.
         * @summary Get consumed and expired offers
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsumedExpiredOfferOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferOfferOutputOfferConsumedExpiredDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsumedExpiredOfferOfferItem(typeContract, brand, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos card click and gift
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfosCardClickAndGiftOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferInfoClickAndGiftPartnerOutputAccountClickAndGiftInfosDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfosCardClickAndGiftOfferItem(typeContract, brand, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos offer evasion
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfosEvasionOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferOfferOutputOfferEvasionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfosEvasionOffersOfferItem(typeContract, brand, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos offer favorite shop
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfosFavoriteShopOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferOfferOutputOfferFavoriteGiftAvailableDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfosFavoriteShopOffersOfferItem(typeContract, brand, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos multi shop partner
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfosPartnerMultiShopOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferMultiShopPartnerInfoOutputAccountMultiShopPartnerDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfosPartnerMultiShopOfferItem(typeContract, brand, contractNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Offer resource.
         * @summary get new code service
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} offerUuid uuid offer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewServiceCodeOfferItem(typeContract: string, brand: string, contractNumber: string, offerUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferServiceCodeOutputOfferServiceCodeDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewServiceCodeOfferItem(typeContract, brand, contractNumber, offerUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Offer resource.
         * @summary activate offer
         * @param {string} amount 
         * @param {string} [brand] 
         * @param {string} [contractNumber] 
         * @param {string} [typeContract] 
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {string} [category] 
         * @param {string} [refContract] 
         * @param {string} [typeAdvantage] 
         * @param {Array<File>} [attachments] 
         * @param {string} [purchaseAmount] 
         * @param {string} [purchaseDate] 
         * @param {string} [currency] 
         * @param {string | null} [amountType] 
         * @param {string | null} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postActivateFavoriteOfferOfferCollection(amount: string, brand?: string, contractNumber?: string, typeContract?: string, packageName?: string, languageCode?: string, name?: string, type?: string, category?: string, refContract?: string, typeAdvantage?: string, attachments?: Array<File>, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string | null, iban?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferFavoriteShopOfferOutputActivateOfferDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postActivateFavoriteOfferOfferCollection(amount, brand, contractNumber, typeContract, packageName, languageCode, name, type, category, refContract, typeAdvantage, attachments, purchaseAmount, purchaseDate, currency, amountType, iban, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Offer resource.
         * @summary activate offer classic
         * @param {string} [brand] 
         * @param {string} [contractNumber] 
         * @param {string} [typeContract] 
         * @param {string} [refContract] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {string} [category] 
         * @param {string} [amount] 
         * @param {string} [purchaseAmount] 
         * @param {string} [purchaseDate] 
         * @param {string} [currency] 
         * @param {string} [amountType] 
         * @param {string} [typeAdvantage] 
         * @param {Array<File>} [attachements] 
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postActivateOfferOfferCollection(brand?: string, contractNumber?: string, typeContract?: string, refContract?: string, name?: string, type?: string, category?: string, amount?: string, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string, typeAdvantage?: string, attachements?: Array<File>, packageName?: string, languageCode?: string, iban?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferSuccessActivateOfferOutputActivateOfferDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postActivateOfferOfferCollection(brand, contractNumber, typeContract, refContract, name, type, category, amount, purchaseAmount, purchaseDate, currency, amountType, typeAdvantage, attachements, packageName, languageCode, iban, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Offer resource.
         * @summary Get evasion session
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSessionEvasionOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferSessionSsoOutputUserEvasionSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSessionEvasionOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Offer resource.
         * @summary get session fujifilm
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string | null} [sessionKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSessionFujifilmOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferSessionSsoOutputUserFujifilmSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSessionFujifilmOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, sessionKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Offer resource.
         * @summary get session Hubside Web
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSessionHubsideWebOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferSessionSsoOutputUserHubsideWebSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSessionHubsideWebOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Offer resource.
         * @summary get session Plebicom
         * @param {number} rate 
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSessionPlebicomOfferCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OfferSessionSsoOutputUserPlebicomSessionDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSessionPlebicomOfferCollection(rate, brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OfferApi - factory interface
 * @export
 */
export const OfferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OfferApiFp(configuration)
    return {
        /**
         * Creates a Offer resource.
         * @summary Create card click and gift
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string} [amount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCardClickAndGiftOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, amount?: string, options?: any): AxiosPromise<OfferClickAndGiftOutputUserClickAndGiftCreateDocumentation> {
            return localVarFp.createCardClickAndGiftOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos advantages
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdvantagesOfferItem(typeContract: string, brand: string, contractNumber: string, packageName?: string, languageCode?: string, options?: any): AxiosPromise<object> {
            return localVarFp.getAdvantagesOfferItem(typeContract, brand, contractNumber, packageName, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Offer resource.
         * @summary Get consumed and expired offers
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsumedExpiredOfferOfferItem(typeContract: string, brand: string, contractNumber: string, options?: any): AxiosPromise<OfferOfferOutputOfferConsumedExpiredDocumentation> {
            return localVarFp.getConsumedExpiredOfferOfferItem(typeContract, brand, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos card click and gift
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosCardClickAndGiftOfferItem(typeContract: string, brand: string, contractNumber: string, options?: any): AxiosPromise<OfferInfoClickAndGiftPartnerOutputAccountClickAndGiftInfosDocumentation> {
            return localVarFp.getInfosCardClickAndGiftOfferItem(typeContract, brand, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos offer evasion
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosEvasionOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: any): AxiosPromise<OfferOfferOutputOfferEvasionDocumentation> {
            return localVarFp.getInfosEvasionOffersOfferItem(typeContract, brand, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos offer favorite shop
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosFavoriteShopOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: any): AxiosPromise<OfferOfferOutputOfferFavoriteGiftAvailableDocumentation> {
            return localVarFp.getInfosFavoriteShopOffersOfferItem(typeContract, brand, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Offer resource.
         * @summary get infos multi shop partner
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfosPartnerMultiShopOfferItem(typeContract: string, brand: string, contractNumber: string, options?: any): AxiosPromise<OfferMultiShopPartnerInfoOutputAccountMultiShopPartnerDocumentation> {
            return localVarFp.getInfosPartnerMultiShopOfferItem(typeContract, brand, contractNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Offer resource.
         * @summary get new code service
         * @param {string} typeContract Type of product
         * @param {string} brand Mark contract
         * @param {string} contractNumber contract Number
         * @param {string} offerUuid uuid offer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewServiceCodeOfferItem(typeContract: string, brand: string, contractNumber: string, offerUuid: string, options?: any): AxiosPromise<OfferServiceCodeOutputOfferServiceCodeDocumentation> {
            return localVarFp.getNewServiceCodeOfferItem(typeContract, brand, contractNumber, offerUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Offer resource.
         * @summary activate offer
         * @param {string} amount 
         * @param {string} [brand] 
         * @param {string} [contractNumber] 
         * @param {string} [typeContract] 
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {string} [category] 
         * @param {string} [refContract] 
         * @param {string} [typeAdvantage] 
         * @param {Array<File>} [attachments] 
         * @param {string} [purchaseAmount] 
         * @param {string} [purchaseDate] 
         * @param {string} [currency] 
         * @param {string | null} [amountType] 
         * @param {string | null} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActivateFavoriteOfferOfferCollection(amount: string, brand?: string, contractNumber?: string, typeContract?: string, packageName?: string, languageCode?: string, name?: string, type?: string, category?: string, refContract?: string, typeAdvantage?: string, attachments?: Array<File>, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string | null, iban?: string | null, options?: any): AxiosPromise<OfferFavoriteShopOfferOutputActivateOfferDocumentation> {
            return localVarFp.postActivateFavoriteOfferOfferCollection(amount, brand, contractNumber, typeContract, packageName, languageCode, name, type, category, refContract, typeAdvantage, attachments, purchaseAmount, purchaseDate, currency, amountType, iban, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Offer resource.
         * @summary activate offer classic
         * @param {string} [brand] 
         * @param {string} [contractNumber] 
         * @param {string} [typeContract] 
         * @param {string} [refContract] 
         * @param {string} [name] 
         * @param {string} [type] 
         * @param {string} [category] 
         * @param {string} [amount] 
         * @param {string} [purchaseAmount] 
         * @param {string} [purchaseDate] 
         * @param {string} [currency] 
         * @param {string} [amountType] 
         * @param {string} [typeAdvantage] 
         * @param {Array<File>} [attachements] 
         * @param {string} [packageName] 
         * @param {string} [languageCode] 
         * @param {string} [iban] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postActivateOfferOfferCollection(brand?: string, contractNumber?: string, typeContract?: string, refContract?: string, name?: string, type?: string, category?: string, amount?: string, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string, typeAdvantage?: string, attachements?: Array<File>, packageName?: string, languageCode?: string, iban?: string, options?: any): AxiosPromise<OfferSuccessActivateOfferOutputActivateOfferDocumentation> {
            return localVarFp.postActivateOfferOfferCollection(brand, contractNumber, typeContract, refContract, name, type, category, amount, purchaseAmount, purchaseDate, currency, amountType, typeAdvantage, attachements, packageName, languageCode, iban, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Offer resource.
         * @summary Get evasion session
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionEvasionOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: any): AxiosPromise<OfferSessionSsoOutputUserEvasionSessionDocumentation> {
            return localVarFp.postSessionEvasionOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Offer resource.
         * @summary get session fujifilm
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {string | null} [sessionKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionFujifilmOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: any): AxiosPromise<OfferSessionSsoOutputUserFujifilmSessionDocumentation> {
            return localVarFp.postSessionFujifilmOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, sessionKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Offer resource.
         * @summary get session Hubside Web
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionHubsideWebOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: any): AxiosPromise<OfferSessionSsoOutputUserHubsideWebSessionDocumentation> {
            return localVarFp.postSessionHubsideWebOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Offer resource.
         * @summary get session Plebicom
         * @param {number} rate 
         * @param {string | null} brand 
         * @param {string | null} contractNumber 
         * @param {string | null} login 
         * @param {string | null} partnerName 
         * @param {string | null} typeContract 
         * @param {string | null} packageName 
         * @param {string | null} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSessionPlebicomOfferCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: any): AxiosPromise<OfferSessionSsoOutputUserPlebicomSessionDocumentation> {
            return localVarFp.postSessionPlebicomOfferCollection(rate, brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfferApi - interface
 * @export
 * @interface OfferApi
 */
export interface OfferApiInterface {
    /**
     * Creates a Offer resource.
     * @summary Create card click and gift
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {string} [amount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    createCardClickAndGiftOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, amount?: string, options?: AxiosRequestConfig): AxiosPromise<OfferClickAndGiftOutputUserClickAndGiftCreateDocumentation>;

    /**
     * Retrieves a Offer resource.
     * @summary get infos advantages
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {string} [packageName] 
     * @param {string} [languageCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    getAdvantagesOfferItem(typeContract: string, brand: string, contractNumber: string, packageName?: string, languageCode?: string, options?: AxiosRequestConfig): AxiosPromise<object>;

    /**
     * Retrieves a Offer resource.
     * @summary Get consumed and expired offers
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    getConsumedExpiredOfferOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<OfferOfferOutputOfferConsumedExpiredDocumentation>;

    /**
     * Retrieves a Offer resource.
     * @summary get infos card click and gift
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    getInfosCardClickAndGiftOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<OfferInfoClickAndGiftPartnerOutputAccountClickAndGiftInfosDocumentation>;

    /**
     * Retrieves a Offer resource.
     * @summary get infos offer evasion
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    getInfosEvasionOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<OfferOfferOutputOfferEvasionDocumentation>;

    /**
     * Retrieves a Offer resource.
     * @summary get infos offer favorite shop
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    getInfosFavoriteShopOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<OfferOfferOutputOfferFavoriteGiftAvailableDocumentation>;

    /**
     * Retrieves a Offer resource.
     * @summary get infos multi shop partner
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    getInfosPartnerMultiShopOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig): AxiosPromise<OfferMultiShopPartnerInfoOutputAccountMultiShopPartnerDocumentation>;

    /**
     * Retrieves a Offer resource.
     * @summary get new code service
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {string} offerUuid uuid offer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    getNewServiceCodeOfferItem(typeContract: string, brand: string, contractNumber: string, offerUuid: string, options?: AxiosRequestConfig): AxiosPromise<OfferServiceCodeOutputOfferServiceCodeDocumentation>;

    /**
     * Creates a Offer resource.
     * @summary activate offer
     * @param {string} amount 
     * @param {string} [brand] 
     * @param {string} [contractNumber] 
     * @param {string} [typeContract] 
     * @param {string} [packageName] 
     * @param {string} [languageCode] 
     * @param {string} [name] 
     * @param {string} [type] 
     * @param {string} [category] 
     * @param {string} [refContract] 
     * @param {string} [typeAdvantage] 
     * @param {Array<File>} [attachments] 
     * @param {string} [purchaseAmount] 
     * @param {string} [purchaseDate] 
     * @param {string} [currency] 
     * @param {string | null} [amountType] 
     * @param {string | null} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    postActivateFavoriteOfferOfferCollection(amount: string, brand?: string, contractNumber?: string, typeContract?: string, packageName?: string, languageCode?: string, name?: string, type?: string, category?: string, refContract?: string, typeAdvantage?: string, attachments?: Array<File>, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string | null, iban?: string | null, options?: AxiosRequestConfig): AxiosPromise<OfferFavoriteShopOfferOutputActivateOfferDocumentation>;

    /**
     * Creates a Offer resource.
     * @summary activate offer classic
     * @param {string} [brand] 
     * @param {string} [contractNumber] 
     * @param {string} [typeContract] 
     * @param {string} [refContract] 
     * @param {string} [name] 
     * @param {string} [type] 
     * @param {string} [category] 
     * @param {string} [amount] 
     * @param {string} [purchaseAmount] 
     * @param {string} [purchaseDate] 
     * @param {string} [currency] 
     * @param {string} [amountType] 
     * @param {string} [typeAdvantage] 
     * @param {Array<File>} [attachements] 
     * @param {string} [packageName] 
     * @param {string} [languageCode] 
     * @param {string} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    postActivateOfferOfferCollection(brand?: string, contractNumber?: string, typeContract?: string, refContract?: string, name?: string, type?: string, category?: string, amount?: string, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string, typeAdvantage?: string, attachements?: Array<File>, packageName?: string, languageCode?: string, iban?: string, options?: AxiosRequestConfig): AxiosPromise<OfferSuccessActivateOfferOutputActivateOfferDocumentation>;

    /**
     * Creates a Offer resource.
     * @summary Get evasion session
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    postSessionEvasionOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): AxiosPromise<OfferSessionSsoOutputUserEvasionSessionDocumentation>;

    /**
     * Creates a Offer resource.
     * @summary get session fujifilm
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {string | null} [sessionKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    postSessionFujifilmOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: AxiosRequestConfig): AxiosPromise<OfferSessionSsoOutputUserFujifilmSessionDocumentation>;

    /**
     * Creates a Offer resource.
     * @summary get session Hubside Web
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    postSessionHubsideWebOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): AxiosPromise<OfferSessionSsoOutputUserHubsideWebSessionDocumentation>;

    /**
     * Creates a Offer resource.
     * @summary get session Plebicom
     * @param {number} rate 
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApiInterface
     */
    postSessionPlebicomOfferCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig): AxiosPromise<OfferSessionSsoOutputUserPlebicomSessionDocumentation>;

}

/**
 * OfferApi - object-oriented interface
 * @export
 * @class OfferApi
 * @extends {BaseAPI}
 */
export class OfferApi extends BaseAPI implements OfferApiInterface {
    /**
     * Creates a Offer resource.
     * @summary Create card click and gift
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {string} [amount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public createCardClickAndGiftOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, amount?: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).createCardClickAndGiftOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Offer resource.
     * @summary get infos advantages
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {string} [packageName] 
     * @param {string} [languageCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getAdvantagesOfferItem(typeContract: string, brand: string, contractNumber: string, packageName?: string, languageCode?: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getAdvantagesOfferItem(typeContract, brand, contractNumber, packageName, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Offer resource.
     * @summary Get consumed and expired offers
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getConsumedExpiredOfferOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getConsumedExpiredOfferOfferItem(typeContract, brand, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Offer resource.
     * @summary get infos card click and gift
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getInfosCardClickAndGiftOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getInfosCardClickAndGiftOfferItem(typeContract, brand, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Offer resource.
     * @summary get infos offer evasion
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getInfosEvasionOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getInfosEvasionOffersOfferItem(typeContract, brand, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Offer resource.
     * @summary get infos offer favorite shop
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getInfosFavoriteShopOffersOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getInfosFavoriteShopOffersOfferItem(typeContract, brand, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Offer resource.
     * @summary get infos multi shop partner
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getInfosPartnerMultiShopOfferItem(typeContract: string, brand: string, contractNumber: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getInfosPartnerMultiShopOfferItem(typeContract, brand, contractNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Offer resource.
     * @summary get new code service
     * @param {string} typeContract Type of product
     * @param {string} brand Mark contract
     * @param {string} contractNumber contract Number
     * @param {string} offerUuid uuid offer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public getNewServiceCodeOfferItem(typeContract: string, brand: string, contractNumber: string, offerUuid: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).getNewServiceCodeOfferItem(typeContract, brand, contractNumber, offerUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Offer resource.
     * @summary activate offer
     * @param {string} amount 
     * @param {string} [brand] 
     * @param {string} [contractNumber] 
     * @param {string} [typeContract] 
     * @param {string} [packageName] 
     * @param {string} [languageCode] 
     * @param {string} [name] 
     * @param {string} [type] 
     * @param {string} [category] 
     * @param {string} [refContract] 
     * @param {string} [typeAdvantage] 
     * @param {Array<File>} [attachments] 
     * @param {string} [purchaseAmount] 
     * @param {string} [purchaseDate] 
     * @param {string} [currency] 
     * @param {string | null} [amountType] 
     * @param {string | null} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public postActivateFavoriteOfferOfferCollection(amount: string, brand?: string, contractNumber?: string, typeContract?: string, packageName?: string, languageCode?: string, name?: string, type?: string, category?: string, refContract?: string, typeAdvantage?: string, attachments?: Array<File>, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string | null, iban?: string | null, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).postActivateFavoriteOfferOfferCollection(amount, brand, contractNumber, typeContract, packageName, languageCode, name, type, category, refContract, typeAdvantage, attachments, purchaseAmount, purchaseDate, currency, amountType, iban, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Offer resource.
     * @summary activate offer classic
     * @param {string} [brand] 
     * @param {string} [contractNumber] 
     * @param {string} [typeContract] 
     * @param {string} [refContract] 
     * @param {string} [name] 
     * @param {string} [type] 
     * @param {string} [category] 
     * @param {string} [amount] 
     * @param {string} [purchaseAmount] 
     * @param {string} [purchaseDate] 
     * @param {string} [currency] 
     * @param {string} [amountType] 
     * @param {string} [typeAdvantage] 
     * @param {Array<File>} [attachements] 
     * @param {string} [packageName] 
     * @param {string} [languageCode] 
     * @param {string} [iban] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public postActivateOfferOfferCollection(brand?: string, contractNumber?: string, typeContract?: string, refContract?: string, name?: string, type?: string, category?: string, amount?: string, purchaseAmount?: string, purchaseDate?: string, currency?: string, amountType?: string, typeAdvantage?: string, attachements?: Array<File>, packageName?: string, languageCode?: string, iban?: string, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).postActivateOfferOfferCollection(brand, contractNumber, typeContract, refContract, name, type, category, amount, purchaseAmount, purchaseDate, currency, amountType, typeAdvantage, attachements, packageName, languageCode, iban, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Offer resource.
     * @summary Get evasion session
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public postSessionEvasionOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).postSessionEvasionOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Offer resource.
     * @summary get session fujifilm
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {string | null} [sessionKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public postSessionFujifilmOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, sessionKey?: string | null, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).postSessionFujifilmOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, sessionKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Offer resource.
     * @summary get session Hubside Web
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public postSessionHubsideWebOfferCollection(brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).postSessionHubsideWebOfferCollection(brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Offer resource.
     * @summary get session Plebicom
     * @param {number} rate 
     * @param {string | null} brand 
     * @param {string | null} contractNumber 
     * @param {string | null} login 
     * @param {string | null} partnerName 
     * @param {string | null} typeContract 
     * @param {string | null} packageName 
     * @param {string | null} languageCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public postSessionPlebicomOfferCollection(rate: number, brand: string | null, contractNumber: string | null, login: string | null, partnerName: string | null, typeContract: string | null, packageName: string | null, languageCode: string | null, options?: AxiosRequestConfig) {
        return OfferApiFp(this.configuration).postSessionPlebicomOfferCollection(rate, brand, contractNumber, login, partnerName, typeContract, packageName, languageCode, options).then((request) => request(this.axios, this.basePath));
    }
}

