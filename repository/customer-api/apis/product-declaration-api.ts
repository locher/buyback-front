/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service
 * API for Customer Service
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetDeclarationsByContractNumberProductDeclarationCollection200Response } from '../models';
// @ts-ignore
import { ProductDeclarationJsonldProductDeclarationReadDocumentation } from '../models';
// @ts-ignore
import { ProductDeclarationProductDeclarationInputJsonldProductDeclarationWriteDocumentation } from '../models';
// @ts-ignore
import { ProductDeclarationProductDeclarationReadDocumentation } from '../models';
/**
 * ProductDeclarationApi - axios parameter creator
 * @export
 */
export const ProductDeclarationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ProductDeclaration resources.
         * @summary Retrieves the collection of ProductDeclaration resources.
         * @param {string} contractNumber Contract Number
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeclarationsByContractNumberProductDeclarationCollection: async (contractNumber: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getDeclarationsByContractNumberProductDeclarationCollection', 'contractNumber', contractNumber)
            const localVarPath = `/api/product-declaration/{contractNumber}/declarations`
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductDeclaration resource.
         * @summary Retrieves a ProductDeclaration resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeclarationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductDeclarationItem', 'id', id)
            const localVarPath = `/api/product-declaration/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ProductDeclaration resource.
         * @summary Create a product declaration
         * @param {string} contractNumber contractNumber
         * @param {string} type 
         * @param {string} brand 
         * @param {string} model 
         * @param {Array<File>} [purchaseInvoice] 
         * @param {Array<string>} [productDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateDeclarationProductProductDeclarationCollection: async (contractNumber: string, type: string, brand: string, model: string, purchaseInvoice?: Array<File>, productDetails?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('postCreateDeclarationProductProductDeclarationCollection', 'contractNumber', contractNumber)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('postCreateDeclarationProductProductDeclarationCollection', 'type', type)
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postCreateDeclarationProductProductDeclarationCollection', 'brand', brand)
            // verify required parameter 'model' is not null or undefined
            assertParamExists('postCreateDeclarationProductProductDeclarationCollection', 'model', model)
            const localVarPath = `/api/product-declaration/{contractNumber}`
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (brand !== undefined) { 
                localVarFormParams.append('brand', brand as any);
            }
    
            if (model !== undefined) { 
                localVarFormParams.append('model', model as any);
            }
                if (purchaseInvoice) {
                purchaseInvoice.forEach((element) => {
                    localVarFormParams.append('purchaseInvoice', element as any);
                })
            }

                if (productDetails) {
                localVarFormParams.append('productDetails', productDetails.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductDeclarationApi - functional programming interface
 * @export
 */
export const ProductDeclarationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductDeclarationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ProductDeclaration resources.
         * @summary Retrieves the collection of ProductDeclaration resources.
         * @param {string} contractNumber Contract Number
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeclarationsByContractNumberProductDeclarationCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDeclarationProductDeclarationReadDocumentation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeclarationsByContractNumberProductDeclarationCollection(contractNumber, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductDeclaration resource.
         * @summary Retrieves a ProductDeclaration resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductDeclarationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDeclarationProductDeclarationReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductDeclarationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ProductDeclaration resource.
         * @summary Create a product declaration
         * @param {string} contractNumber contractNumber
         * @param {string} type 
         * @param {string} brand 
         * @param {string} model 
         * @param {Array<File>} [purchaseInvoice] 
         * @param {Array<string>} [productDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateDeclarationProductProductDeclarationCollection(contractNumber: string, type: string, brand: string, model: string, purchaseInvoice?: Array<File>, productDetails?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateDeclarationProductProductDeclarationCollection(contractNumber, type, brand, model, purchaseInvoice, productDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductDeclarationApi - factory interface
 * @export
 */
export const ProductDeclarationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductDeclarationApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ProductDeclaration resources.
         * @summary Retrieves the collection of ProductDeclaration resources.
         * @param {string} contractNumber Contract Number
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeclarationsByContractNumberProductDeclarationCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: any): AxiosPromise<Array<ProductDeclarationProductDeclarationReadDocumentation>> {
            return localVarFp.getDeclarationsByContractNumberProductDeclarationCollection(contractNumber, page, itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductDeclaration resource.
         * @summary Retrieves a ProductDeclaration resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductDeclarationItem(id: string, options?: any): AxiosPromise<ProductDeclarationProductDeclarationReadDocumentation> {
            return localVarFp.getProductDeclarationItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ProductDeclaration resource.
         * @summary Create a product declaration
         * @param {string} contractNumber contractNumber
         * @param {string} type 
         * @param {string} brand 
         * @param {string} model 
         * @param {Array<File>} [purchaseInvoice] 
         * @param {Array<string>} [productDetails] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateDeclarationProductProductDeclarationCollection(contractNumber: string, type: string, brand: string, model: string, purchaseInvoice?: Array<File>, productDetails?: Array<string>, options?: any): AxiosPromise<object> {
            return localVarFp.postCreateDeclarationProductProductDeclarationCollection(contractNumber, type, brand, model, purchaseInvoice, productDetails, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductDeclarationApi - interface
 * @export
 * @interface ProductDeclarationApi
 */
export interface ProductDeclarationApiInterface {
    /**
     * Retrieves the collection of ProductDeclaration resources.
     * @summary Retrieves the collection of ProductDeclaration resources.
     * @param {string} contractNumber Contract Number
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeclarationApiInterface
     */
    getDeclarationsByContractNumberProductDeclarationCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<ProductDeclarationProductDeclarationReadDocumentation>>;

    /**
     * Retrieves a ProductDeclaration resource.
     * @summary Retrieves a ProductDeclaration resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeclarationApiInterface
     */
    getProductDeclarationItem(id: string, options?: AxiosRequestConfig): AxiosPromise<ProductDeclarationProductDeclarationReadDocumentation>;

    /**
     * Creates a ProductDeclaration resource.
     * @summary Create a product declaration
     * @param {string} contractNumber contractNumber
     * @param {string} type 
     * @param {string} brand 
     * @param {string} model 
     * @param {Array<File>} [purchaseInvoice] 
     * @param {Array<string>} [productDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeclarationApiInterface
     */
    postCreateDeclarationProductProductDeclarationCollection(contractNumber: string, type: string, brand: string, model: string, purchaseInvoice?: Array<File>, productDetails?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * ProductDeclarationApi - object-oriented interface
 * @export
 * @class ProductDeclarationApi
 * @extends {BaseAPI}
 */
export class ProductDeclarationApi extends BaseAPI implements ProductDeclarationApiInterface {
    /**
     * Retrieves the collection of ProductDeclaration resources.
     * @summary Retrieves the collection of ProductDeclaration resources.
     * @param {string} contractNumber Contract Number
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeclarationApi
     */
    public getDeclarationsByContractNumberProductDeclarationCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig) {
        return ProductDeclarationApiFp(this.configuration).getDeclarationsByContractNumberProductDeclarationCollection(contractNumber, page, itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductDeclaration resource.
     * @summary Retrieves a ProductDeclaration resource.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeclarationApi
     */
    public getProductDeclarationItem(id: string, options?: AxiosRequestConfig) {
        return ProductDeclarationApiFp(this.configuration).getProductDeclarationItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ProductDeclaration resource.
     * @summary Create a product declaration
     * @param {string} contractNumber contractNumber
     * @param {string} type 
     * @param {string} brand 
     * @param {string} model 
     * @param {Array<File>} [purchaseInvoice] 
     * @param {Array<string>} [productDetails] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductDeclarationApi
     */
    public postCreateDeclarationProductProductDeclarationCollection(contractNumber: string, type: string, brand: string, model: string, purchaseInvoice?: Array<File>, productDetails?: Array<string>, options?: AxiosRequestConfig) {
        return ProductDeclarationApiFp(this.configuration).postCreateDeclarationProductProductDeclarationCollection(contractNumber, type, brand, model, purchaseInvoice, productDetails, options).then((request) => request(this.axios, this.basePath));
    }
}

