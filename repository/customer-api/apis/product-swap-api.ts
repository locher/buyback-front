/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service
 * API for Customer Service
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetSwapByContractNumberProductSwapCollection200Response } from '../models';
// @ts-ignore
import { ProductSwapProductSwapInputProductSwapCreateDocumentation } from '../models';
// @ts-ignore
import { ProductSwapProductSwapOutputJsonldProductSwapReadDocumentation } from '../models';
// @ts-ignore
import { ProductSwapProductSwapOutputProductSwapReadDocumentation } from '../models';
/**
 * ProductSwapApi - axios parameter creator
 * @export
 */
export const ProductSwapApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductSwap resource.
         * @summary Retrieves the collection of ProductDeclaration resources.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapByContractIdProductSwapItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSwapByContractIdProductSwapItem', 'id', id)
            const localVarPath = `/api/product-swap/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ProductSwap resources.
         * @summary Retrieves the collection of ProductSwap resources.
         * @param {string} contractNumber Contract Number
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapByContractNumberProductSwapCollection: async (contractNumber: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contractNumber' is not null or undefined
            assertParamExists('getSwapByContractNumberProductSwapCollection', 'contractNumber', contractNumber)
            const localVarPath = `/api/product-swap/{contractNumber}/swaps`
                .replace(`{${"contractNumber"}}`, encodeURIComponent(String(contractNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ProductSwap resource.
         * @summary Create product swap
         * @param {ProductSwapProductSwapInputProductSwapCreateDocumentation} productSwapProductSwapInputProductSwapCreateDocumentation The new ProductSwap resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateSwapProductProductSwapCollection: async (productSwapProductSwapInputProductSwapCreateDocumentation: ProductSwapProductSwapInputProductSwapCreateDocumentation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productSwapProductSwapInputProductSwapCreateDocumentation' is not null or undefined
            assertParamExists('postCreateSwapProductProductSwapCollection', 'productSwapProductSwapInputProductSwapCreateDocumentation', productSwapProductSwapInputProductSwapCreateDocumentation)
            const localVarPath = `/api/product-swap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productSwapProductSwapInputProductSwapCreateDocumentation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductSwapApi - functional programming interface
 * @export
 */
export const ProductSwapApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductSwapApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductSwap resource.
         * @summary Retrieves the collection of ProductDeclaration resources.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwapByContractIdProductSwapItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSwapProductSwapOutputProductSwapReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwapByContractIdProductSwapItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ProductSwap resources.
         * @summary Retrieves the collection of ProductSwap resources.
         * @param {string} contractNumber Contract Number
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwapByContractNumberProductSwapCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductSwapProductSwapOutputProductSwapReadDocumentation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwapByContractNumberProductSwapCollection(contractNumber, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ProductSwap resource.
         * @summary Create product swap
         * @param {ProductSwapProductSwapInputProductSwapCreateDocumentation} productSwapProductSwapInputProductSwapCreateDocumentation The new ProductSwap resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateSwapProductProductSwapCollection(productSwapProductSwapInputProductSwapCreateDocumentation: ProductSwapProductSwapInputProductSwapCreateDocumentation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSwapProductSwapOutputProductSwapReadDocumentation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateSwapProductProductSwapCollection(productSwapProductSwapInputProductSwapCreateDocumentation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductSwapApi - factory interface
 * @export
 */
export const ProductSwapApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductSwapApiFp(configuration)
    return {
        /**
         * Retrieves a ProductSwap resource.
         * @summary Retrieves the collection of ProductDeclaration resources.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapByContractIdProductSwapItem(id: string, options?: any): AxiosPromise<ProductSwapProductSwapOutputProductSwapReadDocumentation> {
            return localVarFp.getSwapByContractIdProductSwapItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ProductSwap resources.
         * @summary Retrieves the collection of ProductSwap resources.
         * @param {string} contractNumber Contract Number
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapByContractNumberProductSwapCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: any): AxiosPromise<Array<ProductSwapProductSwapOutputProductSwapReadDocumentation>> {
            return localVarFp.getSwapByContractNumberProductSwapCollection(contractNumber, page, itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ProductSwap resource.
         * @summary Create product swap
         * @param {ProductSwapProductSwapInputProductSwapCreateDocumentation} productSwapProductSwapInputProductSwapCreateDocumentation The new ProductSwap resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateSwapProductProductSwapCollection(productSwapProductSwapInputProductSwapCreateDocumentation: ProductSwapProductSwapInputProductSwapCreateDocumentation, options?: any): AxiosPromise<ProductSwapProductSwapOutputProductSwapReadDocumentation> {
            return localVarFp.postCreateSwapProductProductSwapCollection(productSwapProductSwapInputProductSwapCreateDocumentation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductSwapApi - interface
 * @export
 * @interface ProductSwapApi
 */
export interface ProductSwapApiInterface {
    /**
     * Retrieves a ProductSwap resource.
     * @summary Retrieves the collection of ProductDeclaration resources.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSwapApiInterface
     */
    getSwapByContractIdProductSwapItem(id: string, options?: AxiosRequestConfig): AxiosPromise<ProductSwapProductSwapOutputProductSwapReadDocumentation>;

    /**
     * Retrieves the collection of ProductSwap resources.
     * @summary Retrieves the collection of ProductSwap resources.
     * @param {string} contractNumber Contract Number
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSwapApiInterface
     */
    getSwapByContractNumberProductSwapCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): AxiosPromise<Array<ProductSwapProductSwapOutputProductSwapReadDocumentation>>;

    /**
     * Creates a ProductSwap resource.
     * @summary Create product swap
     * @param {ProductSwapProductSwapInputProductSwapCreateDocumentation} productSwapProductSwapInputProductSwapCreateDocumentation The new ProductSwap resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSwapApiInterface
     */
    postCreateSwapProductProductSwapCollection(productSwapProductSwapInputProductSwapCreateDocumentation: ProductSwapProductSwapInputProductSwapCreateDocumentation, options?: AxiosRequestConfig): AxiosPromise<ProductSwapProductSwapOutputProductSwapReadDocumentation>;

}

/**
 * ProductSwapApi - object-oriented interface
 * @export
 * @class ProductSwapApi
 * @extends {BaseAPI}
 */
export class ProductSwapApi extends BaseAPI implements ProductSwapApiInterface {
    /**
     * Retrieves a ProductSwap resource.
     * @summary Retrieves the collection of ProductDeclaration resources.
     * @param {string} id Resource identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSwapApi
     */
    public getSwapByContractIdProductSwapItem(id: string, options?: AxiosRequestConfig) {
        return ProductSwapApiFp(this.configuration).getSwapByContractIdProductSwapItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ProductSwap resources.
     * @summary Retrieves the collection of ProductSwap resources.
     * @param {string} contractNumber Contract Number
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSwapApi
     */
    public getSwapByContractNumberProductSwapCollection(contractNumber: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig) {
        return ProductSwapApiFp(this.configuration).getSwapByContractNumberProductSwapCollection(contractNumber, page, itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ProductSwap resource.
     * @summary Create product swap
     * @param {ProductSwapProductSwapInputProductSwapCreateDocumentation} productSwapProductSwapInputProductSwapCreateDocumentation The new ProductSwap resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSwapApi
     */
    public postCreateSwapProductProductSwapCollection(productSwapProductSwapInputProductSwapCreateDocumentation: ProductSwapProductSwapInputProductSwapCreateDocumentation, options?: AxiosRequestConfig) {
        return ProductSwapApiFp(this.configuration).postCreateSwapProductProductSwapCollection(productSwapProductSwapInputProductSwapCreateDocumentation, options).then((request) => request(this.axios, this.basePath));
    }
}

