/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service
 * API for Customer Service
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerFormResponseOutputJsonldUserCustomerFormSendMessageDocumentation } from '../models';
/**
 * CustomerFormApi - axios parameter creator
 * @export
 */
export const CustomerFormApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a CustomerForm resource.
         * @summary Request to send SMS in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} type reclamation/contact
         * @param {string} language fr_FR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFormContentCustomerFormItem: async (brand: string, type: string, language: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('getCustomerFormContentCustomerFormItem', 'brand', brand)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getCustomerFormContentCustomerFormItem', 'type', type)
            // verify required parameter 'language' is not null or undefined
            assertParamExists('getCustomerFormContentCustomerFormItem', 'language', language)
            const localVarPath = `/api/customer-form/{brand}/{type}/{language}`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"language"}}`, encodeURIComponent(String(language)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a CustomerForm resource.
         * @summary Send User and Support information Form
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} [contractNumber] 
         * @param {string} [contractType] 
         * @param {number} [formId] 
         * @param {Array<string>} [steps] 
         * @param {Array<File>} [attachments] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerFormSendMessageCustomerFormCollection: async (brand: string, contractNumber?: string, contractType?: string, formId?: number, steps?: Array<string>, attachments?: Array<File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brand' is not null or undefined
            assertParamExists('postCustomerFormSendMessageCustomerFormCollection', 'brand', brand)
            const localVarPath = `/api/customer-form/{brand}/contact-customer-form`
                .replace(`{${"brand"}}`, encodeURIComponent(String(brand)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (contractNumber !== undefined) { 
                localVarFormParams.append('contractNumber', contractNumber as any);
            }
    
            if (contractType !== undefined) { 
                localVarFormParams.append('contractType', contractType as any);
            }
    
            if (formId !== undefined) { 
                localVarFormParams.append('formId', formId as any);
            }
                if (steps) {
                localVarFormParams.append('steps', steps.join(COLLECTION_FORMATS.csv));
            }

                if (attachments) {
                attachments.forEach((element) => {
                    localVarFormParams.append('attachments', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerFormApi - functional programming interface
 * @export
 */
export const CustomerFormApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerFormApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a CustomerForm resource.
         * @summary Request to send SMS in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} type reclamation/contact
         * @param {string} language fr_FR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerFormContentCustomerFormItem(brand: string, type: string, language: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerFormContentCustomerFormItem(brand, type, language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a CustomerForm resource.
         * @summary Send User and Support information Form
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} [contractNumber] 
         * @param {string} [contractType] 
         * @param {number} [formId] 
         * @param {Array<string>} [steps] 
         * @param {Array<File>} [attachments] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCustomerFormSendMessageCustomerFormCollection(brand: string, contractNumber?: string, contractType?: string, formId?: number, steps?: Array<string>, attachments?: Array<File>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCustomerFormSendMessageCustomerFormCollection(brand, contractNumber, contractType, formId, steps, attachments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerFormApi - factory interface
 * @export
 */
export const CustomerFormApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerFormApiFp(configuration)
    return {
        /**
         * Retrieves a CustomerForm resource.
         * @summary Request to send SMS in order to activate user account.
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} type reclamation/contact
         * @param {string} language fr_FR
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerFormContentCustomerFormItem(brand: string, type: string, language: string, options?: any): AxiosPromise<any> {
            return localVarFp.getCustomerFormContentCustomerFormItem(brand, type, language, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a CustomerForm resource.
         * @summary Send User and Support information Form
         * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
         * @param {string} [contractNumber] 
         * @param {string} [contractType] 
         * @param {number} [formId] 
         * @param {Array<string>} [steps] 
         * @param {Array<File>} [attachments] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCustomerFormSendMessageCustomerFormCollection(brand: string, contractNumber?: string, contractType?: string, formId?: number, steps?: Array<string>, attachments?: Array<File>, options?: any): AxiosPromise<object> {
            return localVarFp.postCustomerFormSendMessageCustomerFormCollection(brand, contractNumber, contractType, formId, steps, attachments, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerFormApi - interface
 * @export
 * @interface CustomerFormApi
 */
export interface CustomerFormApiInterface {
    /**
     * Retrieves a CustomerForm resource.
     * @summary Request to send SMS in order to activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} type reclamation/contact
     * @param {string} language fr_FR
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFormApiInterface
     */
    getCustomerFormContentCustomerFormItem(brand: string, type: string, language: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Creates a CustomerForm resource.
     * @summary Send User and Support information Form
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} [contractNumber] 
     * @param {string} [contractType] 
     * @param {number} [formId] 
     * @param {Array<string>} [steps] 
     * @param {Array<File>} [attachments] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFormApiInterface
     */
    postCustomerFormSendMessageCustomerFormCollection(brand: string, contractNumber?: string, contractType?: string, formId?: number, steps?: Array<string>, attachments?: Array<File>, options?: AxiosRequestConfig): AxiosPromise<object>;

}

/**
 * CustomerFormApi - object-oriented interface
 * @export
 * @class CustomerFormApi
 * @extends {BaseAPI}
 */
export class CustomerFormApi extends BaseAPI implements CustomerFormApiInterface {
    /**
     * Retrieves a CustomerForm resource.
     * @summary Request to send SMS in order to activate user account.
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} type reclamation/contact
     * @param {string} language fr_FR
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFormApi
     */
    public getCustomerFormContentCustomerFormItem(brand: string, type: string, language: string, options?: AxiosRequestConfig) {
        return CustomerFormApiFp(this.configuration).getCustomerFormContentCustomerFormItem(brand, type, language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a CustomerForm resource.
     * @summary Send User and Support information Form
     * @param {string} brand brand : foriou / reward-club / cyrana / celside / hubside-insurance / sfam
     * @param {string} [contractNumber] 
     * @param {string} [contractType] 
     * @param {number} [formId] 
     * @param {Array<string>} [steps] 
     * @param {Array<File>} [attachments] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerFormApi
     */
    public postCustomerFormSendMessageCustomerFormCollection(brand: string, contractNumber?: string, contractType?: string, formId?: number, steps?: Array<string>, attachments?: Array<File>, options?: AxiosRequestConfig) {
        return CustomerFormApiFp(this.configuration).postCustomerFormSendMessageCustomerFormCollection(brand, contractNumber, contractType, formId, steps, attachments, options).then((request) => request(this.axios, this.basePath));
    }
}

