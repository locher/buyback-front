#!/usr/bin/env bash
# ================================================
# !!! @ansible - DO NOT EDIT THIS FILE LOCALLY !!!
# ================================================

# Add or remove keywords here
KEYWORDS_REGEX="dump\(|var_dump\(|exit\(|die\(|Zend_Debug::|print_r\(|console\.(debug|info|log|warn)\("
# TAG TO DISABLE WARNING ON SPECIFIC LINE
FORCE_ALLOW_VALUE='FORCE_ALLOW_DEBUG_FUNCTION'
# Add extensions to check here
EXTENSIONS_REGEX="(.php$|.phtml$|.js$|.twig$)"

ERRORS_BUFFER=""
TEXT_DEFAULT="\\033[0;39m"
TEXT_INFO="\\033[1;32m"
TEXT_ERROR="\\033[1;31m"
TEXT_UNDERLINE="\\0033[4m"
TEXT_BOLD="\\0033[1m"
VERBOSE=false

EXCLUDE_PATTERN=$1
EXCLUDE_PATTERN=${EXCLUDE_PATTERN:=""}

IFS=' ' read -r -a EXCLUDE_PATTERN_CUSTOM <<< "$EXCLUDE_PATTERN"

check(){

    local EXCLUDE_PATTERN_COMMON=( "app/cache" "app/logs" "var/cache" "var/logs" "app/check.php" "src/App/Tests" "src/Tests" "assets/lib/angle" "assets/lib/datatables" "assets/lib/highcharts" "assets/js/app/mlpushmenu.js" "assets/js/forum/paper-dashboard.js" "src/Sfk/StatsBundle/Resources/phantomjs/exportGraph.js")

    FILES_FILTER="git ls-files | grep -E '^(src|assets)'"


    for i in "${EXCLUDE_PATTERN_COMMON[@]}"; do
       local j=$(echo $i | xargs)
       if [ "$j" != "" ]; then
            FILES_FILTER="$FILES_FILTER | grep -v '$j'"
       fi
    done

    for i in "${EXCLUDE_PATTERN_CUSTOM[@]}"; do
       local j=$(echo $i | xargs)
       if [ "$j" != "" ]; then
            FILES_FILTER="$FILES_FILTER | grep -v '$j'"
       fi
    done

    FILES=$(eval ${FILES_FILTER})

    # Determine which version of sed to use BSD or GNU
    TMP_FOO_FILE=$(mktemp /tmp/output.XXXXXXXXXX)
    echo foo > $TMP_FOO_FILE
    $VERBOSE && echo -n "Checking for GNU-style sed -i..."
    sed -r 's/o/o/' $TMP_FOO_FILE &>/dev/null
    if test $? -ne 0 ; then
        $VERBOSE && echo " (no)"
        $VERBOSE && echo -n "Checking for BSD-style sed -i..."
        sed -E 's/o/o/' $TMP_FOO_FILE &>/dev/null
        if test $? -eq 0 ; then
            $VERBOSE && echo " (yes)"
            SED_EXTENDED_CMD="sed -E"
        else
            $VERBOSE && echo " (no)"
            echo -e "$TEXT_ERROR" "Unable to determine sed version" "$TEXT_DEFAULT"
        fi
    else
        $VERBOSE && echo " (yes)"
        SED_EXTENDED_CMD="sed -r"
    fi
    rm -f $TMP_FOO_FILE

    echo -e "\\033[1;33m""Keywords checker - pre-commit hook" "$TEXT_DEFAULT"

    for FILE in $FILES; do
         if [[ $FILE =~ $EXTENSIONS_REGEX ]]; then
            ERRORS=""
            while IFS=: read -ra RESULT; do
                if [ "$RESULT" != "" ]; then
                    ERRORS="$ERRORS\n\tline $TEXT_BOLD${RESULT[1]}$TEXT_DEFAULT: "
                    ERRORS="$ERRORS"$(sed -n ${RESULT[1]}p $FILE | $SED_EXTENDED_CMD "s/($KEYWORDS_REGEX)/\\$TEXT_UNDERLINE\1\\$TEXT_DEFAULT/g")
                    if [ "$ERRORS_BUFFER" != "" ]; then
                        ERRORS_BUFFER="$ERRORS_BUFFER\n$ERRORS"
                    else
                        ERRORS_BUFFER="$ERRORS"
                    fi
                fi
            done < <(grep -sEnH $KEYWORDS_REGEX $FILE | grep -v "${FORCE_ALLOW_VALUE}")
            if [ "$ERRORS" != "" ]; then
                ERRORS="$TEXT_ERROR Errors found in $TEXT_BOLD$FILE$TEXT_DEFAULT$ERRORS"
                echo -e "$ERRORS"
            fi
         fi
    done

    if [ "$ERRORS_BUFFER" != "" ]; then
        echo
        echo -e "$TEXT_ERROR" "There were errors or warnings, commit aborted." "$TEXT_DEFAULT"
        echo -e "$TEXT_INFO" "If you are sure you want to commit those files, use --no-verify option" "$TEXT_DEFAULT"
        echo -e "$TEXT_INFO" "If you want to allow forbidden strings, add tag ${FORCE_ALLOW_VALUE} anywhere on the same line." "$TEXT_DEFAULT"

        exit 1
    else
        echo -e "$TEXT_INFO" "All files are clean." "$TEXT_DEFAULT"
        exit 0
    fi
}

check
