# ================================================
# !!! @ansible - DO NOT EDIT THIS FILE LOCALLY !!!
# ================================================
.PHONY: help tests status

-include custom.Makefile

# User Id
UNAME = $(shell uname)

ifeq ($(UNAME), Linux)
   UID = $(shell id -u)
else
   UID = 1000
endif

INTERACTIVE:=$(shell [ -t 0 ] && echo 1)

ifdef INTERACTIVE
	# is a terminal
	TTY_DOCKER=-it
	TTY_COMPOSE=
else
	# bash job
	TTY_DOCKER=
	TTY_COMPOSE=-T
endif

export

COMPOSE=docker-compose

ifneq ("$(wildcard /.dockerenv)","")
	COMPOSE_NODE_CMD=
	COMPOSE_NODE_CMD_RUN=
else
	COMPOSE_NODE_CMD=$(COMPOSE) exec -u node $(TTY_COMPOSE) node
	COMPOSE_NODE_CMD_RUN=$(COMPOSE) run --rm $(TTY_COMPOSE) node
endif


## Display this help text
help:
	@echo COMPOSE:${COMPOSE}
	@echo TTY_DOCKER:${TTY_DOCKER} TTY_COMPOSE:${TTY_COMPOSE}
	@echo COMPOSE_NODE_CMD:${COMPOSE_NODE_CMD}
	@echo COMPOSE_NODE_CMD_RUN:${COMPOSE_NODE_CMD_RUN}
	$(info ---------------------------------------------------------------------)
	$(info -                        Available targets                          -)
	$(info ---------------------------------------------------------------------)
	@awk '/^[a-zA-Z\-\_0-9]+:/ {                                   \
	nb = sub( /^## /, "", helpMsg );                             \
	if(nb == 0) {                                                \
		helpMsg = $$0;                                             \
		nb = sub( /^[^:]*:.* ## /, "", helpMsg );                  \
	}                                                            \
	if (nb)                                                      \
		printf "\033[1;31m%-" width "s\033[0m %s\n", $$1, helpMsg; \
	}                                                              \
	{ helpMsg = $$0 }'                                             \
	$(MAKEFILE_LIST) | column -ts:

#==============================================================================
# Auto conf
#==============================================================================
.node.env:
	cp .node.env.dist .node.env

.env:
	cp .env.dist .env

autoconf: .env .node.env


#==============================================================================
# Standard docker dev commands
#==============================================================================

## Pull images used in docker-compose config
pull: autoconf
	@$(COMPOSE) pull --no-parallel

## Creates vue project
create-project:
	@$(COMPOSE_NODE_CMD_RUN) vue create .
	cp node-nginx/vue.config.js ./vue.config.js

## Start all the containers
up: autoconf
	@$(COMPOSE) up -d

## Alias -> up
start: up

## Stop all the containers
stop:
	@$(COMPOSE) stop

## Stop, then... start
restart: stop start

## Remove all the containers (unmapped data will be lost)
down:
	@$(COMPOSE) down --remove-orphans --volumes

## Logs for all containers of the project
logs:
	docker-compose logs -f

## Status of containers
ps:
	docker-compose ps

#==============================================================================
# Interactive shells
#==============================================================================

## enter in node shell
node: hooks
	$(COMPOSE_NODE_CMD) /bin/bash

## alias -> node
shell: node

## launch a shell on a down container
offline-shell:
	$(COMPOSE_NODE_CMD_RUN) /bin/bash

#==============================================================================
# Shortcuts
#==============================================================================

# Install git hooks
hooks:
	@ln -s -f "./../../.dev/git/pre-commit" ".git/hooks/pre-commit"

## Alias -> internal_update
update:  internal_update

## Upgrade and start the stack
upgrade: autoconf pull internal_update up

internal_update:
	@$(COMPOSE_NODE_CMD_RUN) yarn install
