#!/bin/bash
# ================================================
# !!! @ansible - DO NOT EDIT THIS FILE LOCALLY !!!
# ================================================
set -e

TEXT_INFO="\\033[0;32m"
TEXT_ERROR="\\033[0;31m"
TEXT_NORMAL="\\033[0m"
TEXT_WARNING="\\033[0;33m"
CURRENT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

function show_usage() {
  echo -e " Usage: $0 [${TEXT_INFO}argument${TEXT_NORMAL}]

  ${TEXT_INFO}add\t\t${TEXT_NORMAL}Add a changelog file for the current feature branch (only works on feature branches)
  ${TEXT_INFO}merge\t\t${TEXT_NORMAL}Merge features changelog files in CHANGELOG.md (only works on release branches)"
  exit 1
}

# Create a changelog file for the current branch
# Only works on feature branches
function add() {
  FEATURE_BRANCH_NAME_REGEX='^(feature|fix|hotfix)\/(SHAD-|PIPER-|DELTA-)?([0-9]*).*'

  if [[ $CURRENT_BRANCH_NAME =~ $FEATURE_BRANCH_NAME_REGEX ]]; then
    CHANGELOG_FILE="CHANGELOG_${BASH_REMATCH[3]}.md"
    if [ ! -f "$CHANGELOG_FILE" ]; then
      # Allow to read user input below, assign stdin to keyboard
      exec </dev/tty
      echo -e "${TEXT_WARNING}"
      while read -r -p "There's no changelog file for the current branch. Create it ? (Y/n)" choice; do
        case $choice in
        [Yy])
          cat <<EOF >"$CHANGELOG_FILE"
# * ADD fonctionnalité ajoutée
# * UPD fonctionnalité modifiée
# * DEP fonctionnalité dépréciée
# * REM fonctionnalité supprimée
# * FIX bug corrigé
EOF
          nano "$CHANGELOG_FILE"
          # Remove line comments
          sed -i '/^[[:blank:]]*#/d' "$CHANGELOG_FILE"
          echo -e "${TEXT_NORMAL}Changelog file created (${CHANGELOG_FILE})"
          git add "${CHANGELOG_FILE}"
          exit 1
          ;;
        [Nn])
          echo -e "${TEXT_NORMAL}Changelog file not created"
          exit 1
          ;;
        *) echo -e "${TEXT_NORMAL}Please answer y (yes) or n (no):${TEXT_WARNING}" && continue ;;
        esac
      done
    else
      echo "The file $CHANGELOG_FILE already exists"
    fi
  else
    echo -e "${TEXT_WARNING}[WARNING] Add allowed on (feature|fix|hotfix) branches only${TEXT_NORMAL}"
  fi
}

# Merge features changelog files in CHANGELOG.md
# Only works on release branches
function merge() {

  if [[ ! -f "CHANGELOG.md" ]]; then
    echo -e "${TEXT_ERROR}CHANGELOG.md not exists, you need to launch this script from the project root"
    exit 2
  fi

  # Release branch name (ex: 1.2.3)
  RELEASE_BRANCH_NAME_REGEX='^release\/([0-9]+\.[0-9]+\.[0-9]+$)'

  if [[ $CURRENT_BRANCH_NAME =~ $RELEASE_BRANCH_NAME_REGEX ]]; then
    VERSION="${BASH_REMATCH[1]}"
  else
    echo -e "${TEXT_WARNING}[WARNING] Merge allowed on release branches only (release/x.x.x)${TEXT_NORMAL}"
    exit 1
  fi

  if [[ $(ls | grep -E 'CHANGELOG.+\.md') ]]; then
    CHANGELOG_FILES=$(ls CHANGELOG?*.md)

    echo "### ${VERSION}" >CHANGELOG.md.tmp

    for entry in ${CHANGELOG_FILES}; do
      # add a new line at the end of the file if it's not the case
      sed -i -e '$a\' "${entry}"
      echo "appending ${entry} to CHANGELOG.md"
      cat "${entry}" >>CHANGELOG.md.tmp
    done

    echo "keep original changes"
    cat CHANGELOG.md >>CHANGELOG.md.tmp

    echo "finalize CHANGELOG"
    cat CHANGELOG.md.tmp >CHANGELOG.md
    rm CHANGELOG?*.md CHANGELOG.md.tmp
  else
    echo "No changelog files to merge"
  fi
}

case $1 in
add) add ;;
merge) merge ;;
*) show_usage ;;
esac
